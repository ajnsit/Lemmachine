Upon receipt of a media type with an unrecognized parameter, a user
agent should treat the media type as if the unrecognized parameter and
its value were not present.

content-encoding & media-type only with message-body

If an HTTP/1.0 server receives a Simple-Request, it must respond with
an HTTP/0.9 Simple-Response

An HTTP/1.0 client capable of receiving a Full-Response should never
generate a Simple-Request

An entity consists of Entity-Header fields and (usually) an
Entity-Body.

TODO: request entity header fields apply to response if no body?

Any HTTP/1.0 message containing an entity body should include a
Content-Type header field defining the media type of that body.

If the media type remains unknown, the recipient should treat it as
type "application/octet-stream".

Therefore, HTTP/1.0 requests containing an entity body must include a
valid Content-Length header field.

A valid Content-Length is required on all HTTP/1.0 POST requests. An
HTTP/1.0 server should respond with a 400 (bad request) message if it
cannot determine the length of the request message's content.

If an If-Modified-Since header field is included with a HEAD request, it should be ignored.

The Allow header field is not permitted in a request using the POST
method, and thus should be ignored if it is received as part of a POST entity.

TODO: so maybe in general things that should be ignored when received
are not allowed when sent?

TODO: does Allow description imply only post can have an entity in a
request?

Full-Request and Full-Response messages may transfer an entity within
some requests and responses.

The semantics of the GET method changes to a "conditional GET" if the
request message includes an If-Modified-Since header field.

The presence of an entity body in a request is signaled by the
inclusion of a Content-Length header field in the request message
headers.

If a Content-Length header field is present, its value in bytes
represents the length of the Entity-Body.

Therefore, HTTP/1.0 requests containing an entity body must include a
valid Content-Length header field.

An entity body is included with a request message only when the
request method calls for one.

If-Modified-Since:
A date which is later than the server's current time is invalid.

If a prior request has been authorized, the same credentials may be
reused for all other requests within that protection space for a
period of time determined by the authentication scheme, parameters,
and/or user preference.

Me: so auth can be dependent on previously successful auth and given
still obeying a responded time period

Me: Look more closely at Authentication details wrt history

TODO: re-check section 3

Upon receipt of a media type with an unrecognized parameter, a user
agent should treat the media type as if the unrecognized parameter and
its value were not present.

Use of non-registered media types is discouraged.

Note: Applications are encouraged to be tolerant of bad or misinformed
implementations of the Expires header. A value of zero (0) or an
invalid date format should be considered equivalent to an "expires
immediately." Although these values are not legitimate for HTTP/1.0, a
robust implementation is always desirable.

Last-Modified below + HEAD minus If-Modified-Since
Robust acceptance vs strict sending
204 & 304
Content-Encoding + Content-Type = pluggable typecheck

An origin server must not send a Last-Modified date which is later
than the server's time of message origination. In such cases, where
the resource's last modification would indicate some time in the
future, the server must replace that date with the message origination date.

Applications must not cache responses to a POST request because the
application has no way of knowing that the server would return an
equivalent response on some future request.


A valid Content-Length field value is required on all HTTP/1.0 request
messages containing an entity body.


A SubString may need to be strict to be useful, although we can
jump out and back into simple types internally

Between could just be a HEADERS where they are read until CRLFCRLF

specific types for optional vs required headers

uri = upto SP
header = upto CRLF
somewhere(header) = upto CRLFCRLF
body = vec char c-l

format vs base / parse vs read



All 1xx (informational), 204 (no content), and
304 (not modified) responses must not include a body. All other
responses must include an entity body or a Content-Length header
field defined with a value of zero (0).

Any HTTP/1.0 message containing an entity body should include a
Content-Type header field defining the media type of that body.

If the media type remains unknown, the recipient should treat it as
type "application/octet-stream".

If a request contains an entity body and Content-Length is not
specified, and the server does not recognize or cannot calculate
the length from other fields, then the server should send a 400
(bad request) response.

If-Modified-Since = conditional GET

If an If-Modified-Since header field is included with a HEAD
request, it should be ignored.

The metainformation contained in the HTTP headers in response to a
HEAD request should be identical to the information sent in response to a GET request.

The actual function performed by the POST method is determined by the
server and is usually dependent on the Request-URI.

A successful POST does not require that the entity be created as a
resource on the origin server or made accessible for future
reference. That is, the action performed by the POST method might not
result in a resource that can be identified by a URI. In this case,
either 200 (ok) or 204 (no content) is the appropriate response
status, depending on whether or not the response includes an entity
 that describes the result.

If a resource has been created on the origin server, the response
should be 201 (created) and contain an entity (preferably of type
"text/html") which describes the status of the request and refers to
the new resource.

HTTP/1.0 does not define any 1xx status
codes and they are not a valid response to a HTTP/1.0 request.

201 Created: If the action
cannot be carried out immediately, the server must include in the
response body a description of when the resource will be available;
otherwise, the server should respond with 202 (accepted).

The newly created resource can be referenced by the URI(s)
returned in the entity of the response.

The origin server should
create the resource before using this Status-Code.

Of the methods defined by this specification, only POST can create a
resource.

202 Accepted: The entity returned with this
response should include an indication of the request's current
status and either a pointer to a status monitor or some estimate of
when the user can expect the request to be fulfilled.

204 No Content: The response may include
new metainformation in the form of entity headers, which should
apply to the document currently in the user agent's active view.

The server has fulfilled the request but there is no new
information to send back.
allow input
for scripts or other actions to take place without causing a change
to the user agent's active document view.

300 Multiple Choices:
This response code is not directly used by HTTP/1.0 applications,
but serves as the default for interpreting the 3xx class of
responses.

The requested resource is available at one or more locations.
Unless it was a HEAD request, the response should include an entity
containing a list of resource characteristics and locations from
which the user or user agent can choose the one most appropriate.
If the server has a preferred choice, it should include the URL in
a Location field; user agents may use this field value for
automatic redirection.

301 Moved Permanently:
The new URL must be given by the Location field in the response.
Unless it was a HEAD request, the Entity-Body of the response
should contain a short note with a hyperlink to the new URL.

If the 301 status code is received in response to a request using
the POST method, the user agent must not automatically redirect the
request unless it can be confirmed by the user, since this might
change the conditions under which the request was issued.

501 Not Implemented:
The server does not support the functionality required to fulfill
the request. This is the appropriate response when the server does
not recognize the request method and is not capable of supporting
it for any resource.

TODO: Pragma: no-cache for origin servers?

Location header value in 3xx should be different from Request-URI
(only matters if proxy? is true so abs_path is possible)

Location also possible in 201

The WWW-Authenticate response-header field must be included in 401
(unauthorized) response messages.

already split method header types, probably also want to split types
for optional/required and maybe status code restrictions/additions

Upon receipt of an unauthorized request for a URI within the
protection space, the server should respond with a challenge like the
following:
WWW-Authenticate: Basic realm="WallyWorld"
... unauthorized? hook

HEAD is a special exception where content-type/length/etc can
be present without a body
... it should be identical to GET except that If-Modified-Since
is to be ignored


Servers should
return the status code 501 (not implemented) if the method is
unrecognized or not implemented.


with to-Format all of the former -Format definitions get replaced by a
universe code for them, a function to the Format, and a function to
the type it eventually gets parsed into

need to think about how additional header fields would be extended. it
might just be a hook to add more
although we would then also need to prevent certain headers from being
used before yielding to a hook
since Plus is left-biased, it could be used to set up a chain that
ends in End, where each previous Plus >> Fails

generated type should eventually be self contained with restraints
might work nicely where current is [Ulh] that goes to Elh

http 0.9 detection via Plus

get rid of all the *-Response-*

can do a Plus (read-header >> Fail, else End) as a catchall for any
header that hasn't already been specified

HEAD needs to accept content-* and other entheads according to context
of whether a body would have been there

make Date get checked against last-modified

need a created? hook for POST response

 A valid Content-Length is required on all HTTP/1.0 POST requests. An
   HTTP/1.0 server should respond with a 400 (bad request) message if it
   cannot determine the length of the request message's content.


if-modified-since -> cache

 In this case,
   either 200 (ok) or 204 (no content) is the appropriate response
   status, depending on whether or not the response includes an entity
   that describes the result.

   If a resource has been created on the origin server, the response
   should be 201 (created) and contain an entity (preferably of type
   "text/html") which describes the status of the request and refers to
   the new resource.

preferred choice hook for 300 + including Location
