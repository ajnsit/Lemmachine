module Lemmachine.Resource.Update where
open import Lemmachine.Resource.Universe
open import Lemmachine.Resource.Config

update : (code : Code) → convert code → Config → Config

update resourceExists f c = record {
    resourceExists = f
  ; serviceAvailable = Config.serviceAvailable c
  ; isAuthorized = Config.isAuthorized c
  ; forbidden = Config.forbidden c
  ; allowMissingPost = Config.allowMissingPost c
  ; malformedRequest = Config.malformedRequest c
  ; uriTooLong = Config.uriTooLong c
  ; knownContentType = Config.knownContentType c
  ; validContentHeaders = Config.validContentHeaders c
  ; validEntityLength = Config.validEntityLength c
  ; options = Config.options c
  ; allowedMethods = Config.allowedMethods c
  ; knownMethods = Config.knownMethods c
  ; deleteResource = Config.deleteResource c
  ; deleteCompleted = Config.deleteCompleted c
  ; postIsCreate = Config.postIsCreate c
  ; createPath = Config.createPath c
  ; processPost = Config.processPost c
  ; contentTypesProvided = Config.contentTypesProvided c
  ; languageAvailable = Config.languageAvailable c
  ; contentTypesAccepted = Config.contentTypesAccepted c
  ; charsetsProvided = Config.charsetsProvided c
  ; encodingsProvided = Config.encodingsProvided c
  ; variances = Config.variances c
  ; isConflict = Config.isConflict c
  ; multipleChoices = Config.multipleChoices c
  ; previouslyExisted = Config.previouslyExisted c
  ; movedPermanently = Config.movedPermanently c
  ; movedTemporarily = Config.movedTemporarily c
  ; lastModified = Config.lastModified c
  ; expires = Config.expires c
  ; generateETag = Config.generateETag c
  ; finishRequest = Config.finishRequest c
  }

update serviceAvailable f c = record {
    resourceExists = Config.resourceExists c
  ; serviceAvailable = f
  ; isAuthorized = Config.isAuthorized c
  ; forbidden = Config.forbidden c
  ; allowMissingPost = Config.allowMissingPost c
  ; malformedRequest = Config.malformedRequest c
  ; uriTooLong = Config.uriTooLong c
  ; knownContentType = Config.knownContentType c
  ; validContentHeaders = Config.validContentHeaders c
  ; validEntityLength = Config.validEntityLength c
  ; options = Config.options c
  ; allowedMethods = Config.allowedMethods c
  ; knownMethods = Config.knownMethods c
  ; deleteResource = Config.deleteResource c
  ; deleteCompleted = Config.deleteCompleted c
  ; postIsCreate = Config.postIsCreate c
  ; createPath = Config.createPath c
  ; processPost = Config.processPost c
  ; contentTypesProvided = Config.contentTypesProvided c
  ; languageAvailable = Config.languageAvailable c
  ; contentTypesAccepted = Config.contentTypesAccepted c
  ; charsetsProvided = Config.charsetsProvided c
  ; encodingsProvided = Config.encodingsProvided c
  ; variances = Config.variances c
  ; isConflict = Config.isConflict c
  ; multipleChoices = Config.multipleChoices c
  ; previouslyExisted = Config.previouslyExisted c
  ; movedPermanently = Config.movedPermanently c
  ; movedTemporarily = Config.movedTemporarily c
  ; lastModified = Config.lastModified c
  ; expires = Config.expires c
  ; generateETag = Config.generateETag c
  ; finishRequest = Config.finishRequest c
  }

update isAuthorized f c = record {
    resourceExists = Config.resourceExists c
  ; serviceAvailable = Config.serviceAvailable c
  ; isAuthorized = f
  ; forbidden = Config.forbidden c
  ; allowMissingPost = Config.allowMissingPost c
  ; malformedRequest = Config.malformedRequest c
  ; uriTooLong = Config.uriTooLong c
  ; knownContentType = Config.knownContentType c
  ; validContentHeaders = Config.validContentHeaders c
  ; validEntityLength = Config.validEntityLength c
  ; options = Config.options c
  ; allowedMethods = Config.allowedMethods c
  ; knownMethods = Config.knownMethods c
  ; deleteResource = Config.deleteResource c
  ; deleteCompleted = Config.deleteCompleted c
  ; postIsCreate = Config.postIsCreate c
  ; createPath = Config.createPath c
  ; processPost = Config.processPost c
  ; contentTypesProvided = Config.contentTypesProvided c
  ; languageAvailable = Config.languageAvailable c
  ; contentTypesAccepted = Config.contentTypesAccepted c
  ; charsetsProvided = Config.charsetsProvided c
  ; encodingsProvided = Config.encodingsProvided c
  ; variances = Config.variances c
  ; isConflict = Config.isConflict c
  ; multipleChoices = Config.multipleChoices c
  ; previouslyExisted = Config.previouslyExisted c
  ; movedPermanently = Config.movedPermanently c
  ; movedTemporarily = Config.movedTemporarily c
  ; lastModified = Config.lastModified c
  ; expires = Config.expires c
  ; generateETag = Config.generateETag c
  ; finishRequest = Config.finishRequest c
  }

update forbidden f c = record {
    resourceExists = Config.resourceExists c
  ; serviceAvailable = Config.serviceAvailable c
  ; isAuthorized = Config.isAuthorized c
  ; forbidden = f
  ; allowMissingPost = Config.allowMissingPost c
  ; malformedRequest = Config.malformedRequest c
  ; uriTooLong = Config.uriTooLong c
  ; knownContentType = Config.knownContentType c
  ; validContentHeaders = Config.validContentHeaders c
  ; validEntityLength = Config.validEntityLength c
  ; options = Config.options c
  ; allowedMethods = Config.allowedMethods c
  ; knownMethods = Config.knownMethods c
  ; deleteResource = Config.deleteResource c
  ; deleteCompleted = Config.deleteCompleted c
  ; postIsCreate = Config.postIsCreate c
  ; createPath = Config.createPath c
  ; processPost = Config.processPost c
  ; contentTypesProvided = Config.contentTypesProvided c
  ; languageAvailable = Config.languageAvailable c
  ; contentTypesAccepted = Config.contentTypesAccepted c
  ; charsetsProvided = Config.charsetsProvided c
  ; encodingsProvided = Config.encodingsProvided c
  ; variances = Config.variances c
  ; isConflict = Config.isConflict c
  ; multipleChoices = Config.multipleChoices c
  ; previouslyExisted = Config.previouslyExisted c
  ; movedPermanently = Config.movedPermanently c
  ; movedTemporarily = Config.movedTemporarily c
  ; lastModified = Config.lastModified c
  ; expires = Config.expires c
  ; generateETag = Config.generateETag c
  ; finishRequest = Config.finishRequest c
  }

update allowMissingPost f c = record {
    resourceExists = Config.resourceExists c
  ; serviceAvailable = Config.serviceAvailable c
  ; isAuthorized = Config.isAuthorized c
  ; forbidden = Config.forbidden c
  ; allowMissingPost = f
  ; malformedRequest = Config.malformedRequest c
  ; uriTooLong = Config.uriTooLong c
  ; knownContentType = Config.knownContentType c
  ; validContentHeaders = Config.validContentHeaders c
  ; validEntityLength = Config.validEntityLength c
  ; options = Config.options c
  ; allowedMethods = Config.allowedMethods c
  ; knownMethods = Config.knownMethods c
  ; deleteResource = Config.deleteResource c
  ; deleteCompleted = Config.deleteCompleted c
  ; postIsCreate = Config.postIsCreate c
  ; createPath = Config.createPath c
  ; processPost = Config.processPost c
  ; contentTypesProvided = Config.contentTypesProvided c
  ; languageAvailable = Config.languageAvailable c
  ; contentTypesAccepted = Config.contentTypesAccepted c
  ; charsetsProvided = Config.charsetsProvided c
  ; encodingsProvided = Config.encodingsProvided c
  ; variances = Config.variances c
  ; isConflict = Config.isConflict c
  ; multipleChoices = Config.multipleChoices c
  ; previouslyExisted = Config.previouslyExisted c
  ; movedPermanently = Config.movedPermanently c
  ; movedTemporarily = Config.movedTemporarily c
  ; lastModified = Config.lastModified c
  ; expires = Config.expires c
  ; generateETag = Config.generateETag c
  ; finishRequest = Config.finishRequest c
  }

update malformedRequest f c = record {
    resourceExists = Config.resourceExists c
  ; serviceAvailable = Config.serviceAvailable c
  ; isAuthorized = Config.isAuthorized c
  ; forbidden = Config.forbidden c
  ; allowMissingPost = Config.allowMissingPost c
  ; malformedRequest = f
  ; uriTooLong = Config.uriTooLong c
  ; knownContentType = Config.knownContentType c
  ; validContentHeaders = Config.validContentHeaders c
  ; validEntityLength = Config.validEntityLength c
  ; options = Config.options c
  ; allowedMethods = Config.allowedMethods c
  ; knownMethods = Config.knownMethods c
  ; deleteResource = Config.deleteResource c
  ; deleteCompleted = Config.deleteCompleted c
  ; postIsCreate = Config.postIsCreate c
  ; createPath = Config.createPath c
  ; processPost = Config.processPost c
  ; contentTypesProvided = Config.contentTypesProvided c
  ; languageAvailable = Config.languageAvailable c
  ; contentTypesAccepted = Config.contentTypesAccepted c
  ; charsetsProvided = Config.charsetsProvided c
  ; encodingsProvided = Config.encodingsProvided c
  ; variances = Config.variances c
  ; isConflict = Config.isConflict c
  ; multipleChoices = Config.multipleChoices c
  ; previouslyExisted = Config.previouslyExisted c
  ; movedPermanently = Config.movedPermanently c
  ; movedTemporarily = Config.movedTemporarily c
  ; lastModified = Config.lastModified c
  ; expires = Config.expires c
  ; generateETag = Config.generateETag c
  ; finishRequest = Config.finishRequest c
  }

update uriTooLong f c = record {
    resourceExists = Config.resourceExists c
  ; serviceAvailable = Config.serviceAvailable c
  ; isAuthorized = Config.isAuthorized c
  ; forbidden = Config.forbidden c
  ; allowMissingPost = Config.allowMissingPost c
  ; malformedRequest = Config.malformedRequest c
  ; uriTooLong = f
  ; knownContentType = Config.knownContentType c
  ; validContentHeaders = Config.validContentHeaders c
  ; validEntityLength = Config.validEntityLength c
  ; options = Config.options c
  ; allowedMethods = Config.allowedMethods c
  ; knownMethods = Config.knownMethods c
  ; deleteResource = Config.deleteResource c
  ; deleteCompleted = Config.deleteCompleted c
  ; postIsCreate = Config.postIsCreate c
  ; createPath = Config.createPath c
  ; processPost = Config.processPost c
  ; contentTypesProvided = Config.contentTypesProvided c
  ; languageAvailable = Config.languageAvailable c
  ; contentTypesAccepted = Config.contentTypesAccepted c
  ; charsetsProvided = Config.charsetsProvided c
  ; encodingsProvided = Config.encodingsProvided c
  ; variances = Config.variances c
  ; isConflict = Config.isConflict c
  ; multipleChoices = Config.multipleChoices c
  ; previouslyExisted = Config.previouslyExisted c
  ; movedPermanently = Config.movedPermanently c
  ; movedTemporarily = Config.movedTemporarily c
  ; lastModified = Config.lastModified c
  ; expires = Config.expires c
  ; generateETag = Config.generateETag c
  ; finishRequest = Config.finishRequest c
  }

update knownContentType f c = record {
    resourceExists = Config.resourceExists c
  ; serviceAvailable = Config.serviceAvailable c
  ; isAuthorized = Config.isAuthorized c
  ; forbidden = Config.forbidden c
  ; allowMissingPost = Config.allowMissingPost c
  ; malformedRequest = Config.malformedRequest c
  ; uriTooLong = Config.uriTooLong c
  ; knownContentType = f
  ; validContentHeaders = Config.validContentHeaders c
  ; validEntityLength = Config.validEntityLength c
  ; options = Config.options c
  ; allowedMethods = Config.allowedMethods c
  ; knownMethods = Config.knownMethods c
  ; deleteResource = Config.deleteResource c
  ; deleteCompleted = Config.deleteCompleted c
  ; postIsCreate = Config.postIsCreate c
  ; createPath = Config.createPath c
  ; processPost = Config.processPost c
  ; contentTypesProvided = Config.contentTypesProvided c
  ; languageAvailable = Config.languageAvailable c
  ; contentTypesAccepted = Config.contentTypesAccepted c
  ; charsetsProvided = Config.charsetsProvided c
  ; encodingsProvided = Config.encodingsProvided c
  ; variances = Config.variances c
  ; isConflict = Config.isConflict c
  ; multipleChoices = Config.multipleChoices c
  ; previouslyExisted = Config.previouslyExisted c
  ; movedPermanently = Config.movedPermanently c
  ; movedTemporarily = Config.movedTemporarily c
  ; lastModified = Config.lastModified c
  ; expires = Config.expires c
  ; generateETag = Config.generateETag c
  ; finishRequest = Config.finishRequest c
  }

update validContentHeaders f c = record {
    resourceExists = Config.resourceExists c
  ; serviceAvailable = Config.serviceAvailable c
  ; isAuthorized = Config.isAuthorized c
  ; forbidden = Config.forbidden c
  ; allowMissingPost = Config.allowMissingPost c
  ; malformedRequest = Config.malformedRequest c
  ; uriTooLong = Config.uriTooLong c
  ; knownContentType = Config.knownContentType c
  ; validContentHeaders = f
  ; validEntityLength = Config.validEntityLength c
  ; options = Config.options c
  ; allowedMethods = Config.allowedMethods c
  ; knownMethods = Config.knownMethods c
  ; deleteResource = Config.deleteResource c
  ; deleteCompleted = Config.deleteCompleted c
  ; postIsCreate = Config.postIsCreate c
  ; createPath = Config.createPath c
  ; processPost = Config.processPost c
  ; contentTypesProvided = Config.contentTypesProvided c
  ; languageAvailable = Config.languageAvailable c
  ; contentTypesAccepted = Config.contentTypesAccepted c
  ; charsetsProvided = Config.charsetsProvided c
  ; encodingsProvided = Config.encodingsProvided c
  ; variances = Config.variances c
  ; isConflict = Config.isConflict c
  ; multipleChoices = Config.multipleChoices c
  ; previouslyExisted = Config.previouslyExisted c
  ; movedPermanently = Config.movedPermanently c
  ; movedTemporarily = Config.movedTemporarily c
  ; lastModified = Config.lastModified c
  ; expires = Config.expires c
  ; generateETag = Config.generateETag c
  ; finishRequest = Config.finishRequest c
  }

update validEntityLength f c = record {
    resourceExists = Config.resourceExists c
  ; serviceAvailable = Config.serviceAvailable c
  ; isAuthorized = Config.isAuthorized c
  ; forbidden = Config.forbidden c
  ; allowMissingPost = Config.allowMissingPost c
  ; malformedRequest = Config.malformedRequest c
  ; uriTooLong = Config.uriTooLong c
  ; knownContentType = Config.knownContentType c
  ; validContentHeaders = Config.validContentHeaders c
  ; validEntityLength = f
  ; options = Config.options c
  ; allowedMethods = Config.allowedMethods c
  ; knownMethods = Config.knownMethods c
  ; deleteResource = Config.deleteResource c
  ; deleteCompleted = Config.deleteCompleted c
  ; postIsCreate = Config.postIsCreate c
  ; createPath = Config.createPath c
  ; processPost = Config.processPost c
  ; contentTypesProvided = Config.contentTypesProvided c
  ; languageAvailable = Config.languageAvailable c
  ; contentTypesAccepted = Config.contentTypesAccepted c
  ; charsetsProvided = Config.charsetsProvided c
  ; encodingsProvided = Config.encodingsProvided c
  ; variances = Config.variances c
  ; isConflict = Config.isConflict c
  ; multipleChoices = Config.multipleChoices c
  ; previouslyExisted = Config.previouslyExisted c
  ; movedPermanently = Config.movedPermanently c
  ; movedTemporarily = Config.movedTemporarily c
  ; lastModified = Config.lastModified c
  ; expires = Config.expires c
  ; generateETag = Config.generateETag c
  ; finishRequest = Config.finishRequest c
  }

update options f c = record {
    resourceExists = Config.resourceExists c
  ; serviceAvailable = Config.serviceAvailable c
  ; isAuthorized = Config.isAuthorized c
  ; forbidden = Config.forbidden c
  ; allowMissingPost = Config.allowMissingPost c
  ; malformedRequest = Config.malformedRequest c
  ; uriTooLong = Config.uriTooLong c
  ; knownContentType = Config.knownContentType c
  ; validContentHeaders = Config.validContentHeaders c
  ; validEntityLength = Config.validEntityLength c
  ; options = f
  ; allowedMethods = Config.allowedMethods c
  ; knownMethods = Config.knownMethods c
  ; deleteResource = Config.deleteResource c
  ; deleteCompleted = Config.deleteCompleted c
  ; postIsCreate = Config.postIsCreate c
  ; createPath = Config.createPath c
  ; processPost = Config.processPost c
  ; contentTypesProvided = Config.contentTypesProvided c
  ; languageAvailable = Config.languageAvailable c
  ; contentTypesAccepted = Config.contentTypesAccepted c
  ; charsetsProvided = Config.charsetsProvided c
  ; encodingsProvided = Config.encodingsProvided c
  ; variances = Config.variances c
  ; isConflict = Config.isConflict c
  ; multipleChoices = Config.multipleChoices c
  ; previouslyExisted = Config.previouslyExisted c
  ; movedPermanently = Config.movedPermanently c
  ; movedTemporarily = Config.movedTemporarily c
  ; lastModified = Config.lastModified c
  ; expires = Config.expires c
  ; generateETag = Config.generateETag c
  ; finishRequest = Config.finishRequest c
  }

update allowedMethods f c = record {
    resourceExists = Config.resourceExists c
  ; serviceAvailable = Config.serviceAvailable c
  ; isAuthorized = Config.isAuthorized c
  ; forbidden = Config.forbidden c
  ; allowMissingPost = Config.allowMissingPost c
  ; malformedRequest = Config.malformedRequest c
  ; uriTooLong = Config.uriTooLong c
  ; knownContentType = Config.knownContentType c
  ; validContentHeaders = Config.validContentHeaders c
  ; validEntityLength = Config.validEntityLength c
  ; options = Config.options c
  ; allowedMethods = f
  ; knownMethods = Config.knownMethods c
  ; deleteResource = Config.deleteResource c
  ; deleteCompleted = Config.deleteCompleted c
  ; postIsCreate = Config.postIsCreate c
  ; createPath = Config.createPath c
  ; processPost = Config.processPost c
  ; contentTypesProvided = Config.contentTypesProvided c
  ; languageAvailable = Config.languageAvailable c
  ; contentTypesAccepted = Config.contentTypesAccepted c
  ; charsetsProvided = Config.charsetsProvided c
  ; encodingsProvided = Config.encodingsProvided c
  ; variances = Config.variances c
  ; isConflict = Config.isConflict c
  ; multipleChoices = Config.multipleChoices c
  ; previouslyExisted = Config.previouslyExisted c
  ; movedPermanently = Config.movedPermanently c
  ; movedTemporarily = Config.movedTemporarily c
  ; lastModified = Config.lastModified c
  ; expires = Config.expires c
  ; generateETag = Config.generateETag c
  ; finishRequest = Config.finishRequest c
  }
update knownMethods f c = record {
    resourceExists = Config.resourceExists c
  ; serviceAvailable = Config.serviceAvailable c
  ; isAuthorized = Config.isAuthorized c
  ; forbidden = Config.forbidden c
  ; allowMissingPost = Config.allowMissingPost c
  ; malformedRequest = Config.malformedRequest c
  ; uriTooLong = Config.uriTooLong c
  ; knownContentType = Config.knownContentType c
  ; validContentHeaders = Config.validContentHeaders c
  ; validEntityLength = Config.validEntityLength c
  ; options = Config.options c
  ; allowedMethods = Config.allowedMethods c
  ; knownMethods = f
  ; deleteResource = Config.deleteResource c
  ; deleteCompleted = Config.deleteCompleted c
  ; postIsCreate = Config.postIsCreate c
  ; createPath = Config.createPath c
  ; processPost = Config.processPost c
  ; contentTypesProvided = Config.contentTypesProvided c
  ; languageAvailable = Config.languageAvailable c
  ; contentTypesAccepted = Config.contentTypesAccepted c
  ; charsetsProvided = Config.charsetsProvided c
  ; encodingsProvided = Config.encodingsProvided c
  ; variances = Config.variances c
  ; isConflict = Config.isConflict c
  ; multipleChoices = Config.multipleChoices c
  ; previouslyExisted = Config.previouslyExisted c
  ; movedPermanently = Config.movedPermanently c
  ; movedTemporarily = Config.movedTemporarily c
  ; lastModified = Config.lastModified c
  ; expires = Config.expires c
  ; generateETag = Config.generateETag c
  ; finishRequest = Config.finishRequest c
  }

update deleteResource f c = record {
    resourceExists = Config.resourceExists c
  ; serviceAvailable = Config.serviceAvailable c
  ; isAuthorized = Config.isAuthorized c
  ; forbidden = Config.forbidden c
  ; allowMissingPost = Config.allowMissingPost c
  ; malformedRequest = Config.malformedRequest c
  ; uriTooLong = Config.uriTooLong c
  ; knownContentType = Config.knownContentType c
  ; validContentHeaders = Config.validContentHeaders c
  ; validEntityLength = Config.validEntityLength c
  ; options = Config.options c
  ; allowedMethods = Config.allowedMethods c
  ; knownMethods = Config.knownMethods c
  ; deleteResource = f
  ; deleteCompleted = Config.deleteCompleted c
  ; postIsCreate = Config.postIsCreate c
  ; createPath = Config.createPath c
  ; processPost = Config.processPost c
  ; contentTypesProvided = Config.contentTypesProvided c
  ; languageAvailable = Config.languageAvailable c
  ; contentTypesAccepted = Config.contentTypesAccepted c
  ; charsetsProvided = Config.charsetsProvided c
  ; encodingsProvided = Config.encodingsProvided c
  ; variances = Config.variances c
  ; isConflict = Config.isConflict c
  ; multipleChoices = Config.multipleChoices c
  ; previouslyExisted = Config.previouslyExisted c
  ; movedPermanently = Config.movedPermanently c
  ; movedTemporarily = Config.movedTemporarily c
  ; lastModified = Config.lastModified c
  ; expires = Config.expires c
  ; generateETag = Config.generateETag c
  ; finishRequest = Config.finishRequest c
  }

update deleteCompleted f c = record {
    resourceExists = Config.resourceExists c
  ; serviceAvailable = Config.serviceAvailable c
  ; isAuthorized = Config.isAuthorized c
  ; forbidden = Config.forbidden c
  ; allowMissingPost = Config.allowMissingPost c
  ; malformedRequest = Config.malformedRequest c
  ; uriTooLong = Config.uriTooLong c
  ; knownContentType = Config.knownContentType c
  ; validContentHeaders = Config.validContentHeaders c
  ; validEntityLength = Config.validEntityLength c
  ; options = Config.options c
  ; allowedMethods = Config.allowedMethods c
  ; knownMethods = Config.knownMethods c
  ; deleteResource = Config.deleteResource c
  ; deleteCompleted = f
  ; postIsCreate = Config.postIsCreate c
  ; createPath = Config.createPath c
  ; processPost = Config.processPost c
  ; contentTypesProvided = Config.contentTypesProvided c
  ; languageAvailable = Config.languageAvailable c
  ; contentTypesAccepted = Config.contentTypesAccepted c
  ; charsetsProvided = Config.charsetsProvided c
  ; encodingsProvided = Config.encodingsProvided c
  ; variances = Config.variances c
  ; isConflict = Config.isConflict c
  ; multipleChoices = Config.multipleChoices c
  ; previouslyExisted = Config.previouslyExisted c
  ; movedPermanently = Config.movedPermanently c
  ; movedTemporarily = Config.movedTemporarily c
  ; lastModified = Config.lastModified c
  ; expires = Config.expires c
  ; generateETag = Config.generateETag c
  ; finishRequest = Config.finishRequest c
  }

update postIsCreate f c = record {
    resourceExists = Config.resourceExists c
  ; serviceAvailable = Config.serviceAvailable c
  ; isAuthorized = Config.isAuthorized c
  ; forbidden = Config.forbidden c
  ; allowMissingPost = Config.allowMissingPost c
  ; malformedRequest = Config.malformedRequest c
  ; uriTooLong = Config.uriTooLong c
  ; knownContentType = Config.knownContentType c
  ; validContentHeaders = Config.validContentHeaders c
  ; validEntityLength = Config.validEntityLength c
  ; options = Config.options c
  ; allowedMethods = Config.allowedMethods c
  ; knownMethods = Config.knownMethods c
  ; deleteResource = Config.deleteResource c
  ; deleteCompleted = Config.deleteCompleted c
  ; postIsCreate = f
  ; createPath = Config.createPath c
  ; processPost = Config.processPost c
  ; contentTypesProvided = Config.contentTypesProvided c
  ; languageAvailable = Config.languageAvailable c
  ; contentTypesAccepted = Config.contentTypesAccepted c
  ; charsetsProvided = Config.charsetsProvided c
  ; encodingsProvided = Config.encodingsProvided c
  ; variances = Config.variances c
  ; isConflict = Config.isConflict c
  ; multipleChoices = Config.multipleChoices c
  ; previouslyExisted = Config.previouslyExisted c
  ; movedPermanently = Config.movedPermanently c
  ; movedTemporarily = Config.movedTemporarily c
  ; lastModified = Config.lastModified c
  ; expires = Config.expires c
  ; generateETag = Config.generateETag c
  ; finishRequest = Config.finishRequest c
  }

update createPath f c = record {
    resourceExists = Config.resourceExists c
  ; serviceAvailable = Config.serviceAvailable c
  ; isAuthorized = Config.isAuthorized c
  ; forbidden = Config.forbidden c
  ; allowMissingPost = Config.allowMissingPost c
  ; malformedRequest = Config.malformedRequest c
  ; uriTooLong = Config.uriTooLong c
  ; knownContentType = Config.knownContentType c
  ; validContentHeaders = Config.validContentHeaders c
  ; validEntityLength = Config.validEntityLength c
  ; options = Config.options c
  ; allowedMethods = Config.allowedMethods c
  ; knownMethods = Config.knownMethods c
  ; deleteResource = Config.deleteResource c
  ; deleteCompleted = Config.deleteCompleted c
  ; postIsCreate = Config.postIsCreate c
  ; createPath = f
  ; processPost = Config.processPost c
  ; contentTypesProvided = Config.contentTypesProvided c
  ; languageAvailable = Config.languageAvailable c
  ; contentTypesAccepted = Config.contentTypesAccepted c
  ; charsetsProvided = Config.charsetsProvided c
  ; encodingsProvided = Config.encodingsProvided c
  ; variances = Config.variances c
  ; isConflict = Config.isConflict c
  ; multipleChoices = Config.multipleChoices c
  ; previouslyExisted = Config.previouslyExisted c
  ; movedPermanently = Config.movedPermanently c
  ; movedTemporarily = Config.movedTemporarily c
  ; lastModified = Config.lastModified c
  ; expires = Config.expires c
  ; generateETag = Config.generateETag c
  ; finishRequest = Config.finishRequest c
  }

update processPost f c = record {
    resourceExists = Config.resourceExists c
  ; serviceAvailable = Config.serviceAvailable c
  ; isAuthorized = Config.isAuthorized c
  ; forbidden = Config.forbidden c
  ; allowMissingPost = Config.allowMissingPost c
  ; malformedRequest = Config.malformedRequest c
  ; uriTooLong = Config.uriTooLong c
  ; knownContentType = Config.knownContentType c
  ; validContentHeaders = Config.validContentHeaders c
  ; validEntityLength = Config.validEntityLength c
  ; options = Config.options c
  ; allowedMethods = Config.allowedMethods c
  ; knownMethods = Config.knownMethods c
  ; deleteResource = Config.deleteResource c
  ; deleteCompleted = Config.deleteCompleted c
  ; postIsCreate = Config.postIsCreate c
  ; createPath = Config.createPath c
  ; processPost = f
  ; contentTypesProvided = Config.contentTypesProvided c
  ; languageAvailable = Config.languageAvailable c
  ; contentTypesAccepted = Config.contentTypesAccepted c
  ; charsetsProvided = Config.charsetsProvided c
  ; encodingsProvided = Config.encodingsProvided c
  ; variances = Config.variances c
  ; isConflict = Config.isConflict c
  ; multipleChoices = Config.multipleChoices c
  ; previouslyExisted = Config.previouslyExisted c
  ; movedPermanently = Config.movedPermanently c
  ; movedTemporarily = Config.movedTemporarily c
  ; lastModified = Config.lastModified c
  ; expires = Config.expires c
  ; generateETag = Config.generateETag c
  ; finishRequest = Config.finishRequest c
  }

update contentTypesProvided f c = record {
    resourceExists = Config.resourceExists c
  ; serviceAvailable = Config.serviceAvailable c
  ; isAuthorized = Config.isAuthorized c
  ; forbidden = Config.forbidden c
  ; allowMissingPost = Config.allowMissingPost c
  ; malformedRequest = Config.malformedRequest c
  ; uriTooLong = Config.uriTooLong c
  ; knownContentType = Config.knownContentType c
  ; validContentHeaders = Config.validContentHeaders c
  ; validEntityLength = Config.validEntityLength c
  ; options = Config.options c
  ; allowedMethods = Config.allowedMethods c
  ; knownMethods = Config.knownMethods c
  ; deleteResource = Config.deleteResource c
  ; deleteCompleted = Config.deleteCompleted c
  ; postIsCreate = Config.postIsCreate c
  ; createPath = Config.createPath c
  ; processPost = Config.processPost c
  ; contentTypesProvided = f
  ; languageAvailable = Config.languageAvailable c
  ; contentTypesAccepted = Config.contentTypesAccepted c
  ; charsetsProvided = Config.charsetsProvided c
  ; encodingsProvided = Config.encodingsProvided c
  ; variances = Config.variances c
  ; isConflict = Config.isConflict c
  ; multipleChoices = Config.multipleChoices c
  ; previouslyExisted = Config.previouslyExisted c
  ; movedPermanently = Config.movedPermanently c
  ; movedTemporarily = Config.movedTemporarily c
  ; lastModified = Config.lastModified c
  ; expires = Config.expires c
  ; generateETag = Config.generateETag c
  ; finishRequest = Config.finishRequest c
  }

update languageAvailable f c = record {
    resourceExists = Config.resourceExists c
  ; serviceAvailable = Config.serviceAvailable c
  ; isAuthorized = Config.isAuthorized c
  ; forbidden = Config.forbidden c
  ; allowMissingPost = Config.allowMissingPost c
  ; malformedRequest = Config.malformedRequest c
  ; uriTooLong = Config.uriTooLong c
  ; knownContentType = Config.knownContentType c
  ; validContentHeaders = Config.validContentHeaders c
  ; validEntityLength = Config.validEntityLength c
  ; options = Config.options c
  ; allowedMethods = Config.allowedMethods c
  ; knownMethods = Config.knownMethods c
  ; deleteResource = Config.deleteResource c
  ; deleteCompleted = Config.deleteCompleted c
  ; postIsCreate = Config.postIsCreate c
  ; createPath = Config.createPath c
  ; processPost = Config.processPost c
  ; contentTypesProvided = Config.contentTypesProvided c
  ; languageAvailable = f
  ; contentTypesAccepted = Config.contentTypesAccepted c
  ; charsetsProvided = Config.charsetsProvided c
  ; encodingsProvided = Config.encodingsProvided c
  ; variances = Config.variances c
  ; isConflict = Config.isConflict c
  ; multipleChoices = Config.multipleChoices c
  ; previouslyExisted = Config.previouslyExisted c
  ; movedPermanently = Config.movedPermanently c
  ; movedTemporarily = Config.movedTemporarily c
  ; lastModified = Config.lastModified c
  ; expires = Config.expires c
  ; generateETag = Config.generateETag c
  ; finishRequest = Config.finishRequest c
  }

update contentTypesAccepted f c = record {
    resourceExists = Config.resourceExists c
  ; serviceAvailable = Config.serviceAvailable c
  ; isAuthorized = Config.isAuthorized c
  ; forbidden = Config.forbidden c
  ; allowMissingPost = Config.allowMissingPost c
  ; malformedRequest = Config.malformedRequest c
  ; uriTooLong = Config.uriTooLong c
  ; knownContentType = Config.knownContentType c
  ; validContentHeaders = Config.validContentHeaders c
  ; validEntityLength = Config.validEntityLength c
  ; options = Config.options c
  ; allowedMethods = Config.allowedMethods c
  ; knownMethods = Config.knownMethods c
  ; deleteResource = Config.deleteResource c
  ; deleteCompleted = Config.deleteCompleted c
  ; postIsCreate = Config.postIsCreate c
  ; createPath = Config.createPath c
  ; processPost = Config.processPost c
  ; contentTypesProvided = Config.contentTypesProvided c
  ; languageAvailable = Config.languageAvailable c
  ; contentTypesAccepted = f
  ; charsetsProvided = Config.charsetsProvided c
  ; encodingsProvided = Config.encodingsProvided c
  ; variances = Config.variances c
  ; isConflict = Config.isConflict c
  ; multipleChoices = Config.multipleChoices c
  ; previouslyExisted = Config.previouslyExisted c
  ; movedPermanently = Config.movedPermanently c
  ; movedTemporarily = Config.movedTemporarily c
  ; lastModified = Config.lastModified c
  ; expires = Config.expires c
  ; generateETag = Config.generateETag c
  ; finishRequest = Config.finishRequest c
  }

update charsetsProvided f c = record {
    resourceExists = Config.resourceExists c
  ; serviceAvailable = Config.serviceAvailable c
  ; isAuthorized = Config.isAuthorized c
  ; forbidden = Config.forbidden c
  ; allowMissingPost = Config.allowMissingPost c
  ; malformedRequest = Config.malformedRequest c
  ; uriTooLong = Config.uriTooLong c
  ; knownContentType = Config.knownContentType c
  ; validContentHeaders = Config.validContentHeaders c
  ; validEntityLength = Config.validEntityLength c
  ; options = Config.options c
  ; allowedMethods = Config.allowedMethods c
  ; knownMethods = Config.knownMethods c
  ; deleteResource = Config.deleteResource c
  ; deleteCompleted = Config.deleteCompleted c
  ; postIsCreate = Config.postIsCreate c
  ; createPath = Config.createPath c
  ; processPost = Config.processPost c
  ; contentTypesProvided = Config.contentTypesProvided c
  ; languageAvailable = Config.languageAvailable c
  ; contentTypesAccepted = Config.contentTypesAccepted c
  ; charsetsProvided = f
  ; encodingsProvided = Config.encodingsProvided c
  ; variances = Config.variances c
  ; isConflict = Config.isConflict c
  ; multipleChoices = Config.multipleChoices c
  ; previouslyExisted = Config.previouslyExisted c
  ; movedPermanently = Config.movedPermanently c
  ; movedTemporarily = Config.movedTemporarily c
  ; lastModified = Config.lastModified c
  ; expires = Config.expires c
  ; generateETag = Config.generateETag c
  ; finishRequest = Config.finishRequest c
  }

update encodingsProvided f c = record {
    resourceExists = Config.resourceExists c
  ; serviceAvailable = Config.serviceAvailable c
  ; isAuthorized = Config.isAuthorized c
  ; forbidden = Config.forbidden c
  ; allowMissingPost = Config.allowMissingPost c
  ; malformedRequest = Config.malformedRequest c
  ; uriTooLong = Config.uriTooLong c
  ; knownContentType = Config.knownContentType c
  ; validContentHeaders = Config.validContentHeaders c
  ; validEntityLength = Config.validEntityLength c
  ; options = Config.options c
  ; allowedMethods = Config.allowedMethods c
  ; knownMethods = Config.knownMethods c
  ; deleteResource = Config.deleteResource c
  ; deleteCompleted = Config.deleteCompleted c
  ; postIsCreate = Config.postIsCreate c
  ; createPath = Config.createPath c
  ; processPost = Config.processPost c
  ; contentTypesProvided = Config.contentTypesProvided c
  ; languageAvailable = Config.languageAvailable c
  ; contentTypesAccepted = Config.contentTypesAccepted c
  ; charsetsProvided = Config.charsetsProvided c
  ; encodingsProvided = f
  ; variances = Config.variances c
  ; isConflict = Config.isConflict c
  ; multipleChoices = Config.multipleChoices c
  ; previouslyExisted = Config.previouslyExisted c
  ; movedPermanently = Config.movedPermanently c
  ; movedTemporarily = Config.movedTemporarily c
  ; lastModified = Config.lastModified c
  ; expires = Config.expires c
  ; generateETag = Config.generateETag c
  ; finishRequest = Config.finishRequest c
  }

update variances f c = record {
    resourceExists = Config.resourceExists c
  ; serviceAvailable = Config.serviceAvailable c
  ; isAuthorized = Config.isAuthorized c
  ; forbidden = Config.forbidden c
  ; allowMissingPost = Config.allowMissingPost c
  ; malformedRequest = Config.malformedRequest c
  ; uriTooLong = Config.uriTooLong c
  ; knownContentType = Config.knownContentType c
  ; validContentHeaders = Config.validContentHeaders c
  ; validEntityLength = Config.validEntityLength c
  ; options = Config.options c
  ; allowedMethods = Config.allowedMethods c
  ; knownMethods = Config.knownMethods c
  ; deleteResource = Config.deleteResource c
  ; deleteCompleted = Config.deleteCompleted c
  ; postIsCreate = Config.postIsCreate c
  ; createPath = Config.createPath c
  ; processPost = Config.processPost c
  ; contentTypesProvided = Config.contentTypesProvided c
  ; languageAvailable = Config.languageAvailable c
  ; contentTypesAccepted = Config.contentTypesAccepted c
  ; charsetsProvided = Config.charsetsProvided c
  ; encodingsProvided = Config.encodingsProvided c
  ; variances = f
  ; isConflict = Config.isConflict c
  ; multipleChoices = Config.multipleChoices c
  ; previouslyExisted = Config.previouslyExisted c
  ; movedPermanently = Config.movedPermanently c
  ; movedTemporarily = Config.movedTemporarily c
  ; lastModified = Config.lastModified c
  ; expires = Config.expires c
  ; generateETag = Config.generateETag c
  ; finishRequest = Config.finishRequest c
  }

update isConflict f c = record {
    resourceExists = Config.resourceExists c
  ; serviceAvailable = Config.serviceAvailable c
  ; isAuthorized = Config.isAuthorized c
  ; forbidden = Config.forbidden c
  ; allowMissingPost = Config.allowMissingPost c
  ; malformedRequest = Config.malformedRequest c
  ; uriTooLong = Config.uriTooLong c
  ; knownContentType = Config.knownContentType c
  ; validContentHeaders = Config.validContentHeaders c
  ; validEntityLength = Config.validEntityLength c
  ; options = Config.options c
  ; allowedMethods = Config.allowedMethods c
  ; knownMethods = Config.knownMethods c
  ; deleteResource = Config.deleteResource c
  ; deleteCompleted = Config.deleteCompleted c
  ; postIsCreate = Config.postIsCreate c
  ; createPath = Config.createPath c
  ; processPost = Config.processPost c
  ; contentTypesProvided = Config.contentTypesProvided c
  ; languageAvailable = Config.languageAvailable c
  ; contentTypesAccepted = Config.contentTypesAccepted c
  ; charsetsProvided = Config.charsetsProvided c
  ; encodingsProvided = Config.encodingsProvided c
  ; variances = Config.variances c
  ; isConflict = f
  ; multipleChoices = Config.multipleChoices c
  ; previouslyExisted = Config.previouslyExisted c
  ; movedPermanently = Config.movedPermanently c
  ; movedTemporarily = Config.movedTemporarily c
  ; lastModified = Config.lastModified c
  ; expires = Config.expires c
  ; generateETag = Config.generateETag c
  ; finishRequest = Config.finishRequest c
  }

update multipleChoices f c = record {
    resourceExists = Config.resourceExists c
  ; serviceAvailable = Config.serviceAvailable c
  ; isAuthorized = Config.isAuthorized c
  ; forbidden = Config.forbidden c
  ; allowMissingPost = Config.allowMissingPost c
  ; malformedRequest = Config.malformedRequest c
  ; uriTooLong = Config.uriTooLong c
  ; knownContentType = Config.knownContentType c
  ; validContentHeaders = Config.validContentHeaders c
  ; validEntityLength = Config.validEntityLength c
  ; options = Config.options c
  ; allowedMethods = Config.allowedMethods c
  ; knownMethods = Config.knownMethods c
  ; deleteResource = Config.deleteResource c
  ; deleteCompleted = Config.deleteCompleted c
  ; postIsCreate = Config.postIsCreate c
  ; createPath = Config.createPath c
  ; processPost = Config.processPost c
  ; contentTypesProvided = Config.contentTypesProvided c
  ; languageAvailable = Config.languageAvailable c
  ; contentTypesAccepted = Config.contentTypesAccepted c
  ; charsetsProvided = Config.charsetsProvided c
  ; encodingsProvided = Config.encodingsProvided c
  ; variances = Config.variances c
  ; isConflict = Config.isConflict c
  ; multipleChoices = f
  ; previouslyExisted = Config.previouslyExisted c
  ; movedPermanently = Config.movedPermanently c
  ; movedTemporarily = Config.movedTemporarily c
  ; lastModified = Config.lastModified c
  ; expires = Config.expires c
  ; generateETag = Config.generateETag c
  ; finishRequest = Config.finishRequest c
  }

update previouslyExisted f c = record {
    resourceExists = Config.resourceExists c
  ; serviceAvailable = Config.serviceAvailable c
  ; isAuthorized = Config.isAuthorized c
  ; forbidden = Config.forbidden c
  ; allowMissingPost = Config.allowMissingPost c
  ; malformedRequest = Config.malformedRequest c
  ; uriTooLong = Config.uriTooLong c
  ; knownContentType = Config.knownContentType c
  ; validContentHeaders = Config.validContentHeaders c
  ; validEntityLength = Config.validEntityLength c
  ; options = Config.options c
  ; allowedMethods = Config.allowedMethods c
  ; knownMethods = Config.knownMethods c
  ; deleteResource = Config.deleteResource c
  ; deleteCompleted = Config.deleteCompleted c
  ; postIsCreate = Config.postIsCreate c
  ; createPath = Config.createPath c
  ; processPost = Config.processPost c
  ; contentTypesProvided = Config.contentTypesProvided c
  ; languageAvailable = Config.languageAvailable c
  ; contentTypesAccepted = Config.contentTypesAccepted c
  ; charsetsProvided = Config.charsetsProvided c
  ; encodingsProvided = Config.encodingsProvided c
  ; variances = Config.variances c
  ; isConflict = Config.isConflict c
  ; multipleChoices = Config.multipleChoices c
  ; previouslyExisted = f
  ; movedPermanently = Config.movedPermanently c
  ; movedTemporarily = Config.movedTemporarily c
  ; lastModified = Config.lastModified c
  ; expires = Config.expires c
  ; generateETag = Config.generateETag c
  ; finishRequest = Config.finishRequest c
  }

update movedPermanently f c = record {
    resourceExists = Config.resourceExists c
  ; serviceAvailable = Config.serviceAvailable c
  ; isAuthorized = Config.isAuthorized c
  ; forbidden = Config.forbidden c
  ; allowMissingPost = Config.allowMissingPost c
  ; malformedRequest = Config.malformedRequest c
  ; uriTooLong = Config.uriTooLong c
  ; knownContentType = Config.knownContentType c
  ; validContentHeaders = Config.validContentHeaders c
  ; validEntityLength = Config.validEntityLength c
  ; options = Config.options c
  ; allowedMethods = Config.allowedMethods c
  ; knownMethods = Config.knownMethods c
  ; deleteResource = Config.deleteResource c
  ; deleteCompleted = Config.deleteCompleted c
  ; postIsCreate = Config.postIsCreate c
  ; createPath = Config.createPath c
  ; processPost = Config.processPost c
  ; contentTypesProvided = Config.contentTypesProvided c
  ; languageAvailable = Config.languageAvailable c
  ; contentTypesAccepted = Config.contentTypesAccepted c
  ; charsetsProvided = Config.charsetsProvided c
  ; encodingsProvided = Config.encodingsProvided c
  ; variances = Config.variances c
  ; isConflict = Config.isConflict c
  ; multipleChoices = Config.multipleChoices c
  ; previouslyExisted = Config.previouslyExisted c
  ; movedPermanently = f
  ; movedTemporarily = Config.movedTemporarily c
  ; lastModified = Config.lastModified c
  ; expires = Config.expires c
  ; generateETag = Config.generateETag c
  ; finishRequest = Config.finishRequest c
  }

update movedTemporarily f c = record {
    resourceExists = Config.resourceExists c
  ; serviceAvailable = Config.serviceAvailable c
  ; isAuthorized = Config.isAuthorized c
  ; forbidden = Config.forbidden c
  ; allowMissingPost = Config.allowMissingPost c
  ; malformedRequest = Config.malformedRequest c
  ; uriTooLong = Config.uriTooLong c
  ; knownContentType = Config.knownContentType c
  ; validContentHeaders = Config.validContentHeaders c
  ; validEntityLength = Config.validEntityLength c
  ; options = Config.options c
  ; allowedMethods = Config.allowedMethods c
  ; knownMethods = Config.knownMethods c
  ; deleteResource = Config.deleteResource c
  ; deleteCompleted = Config.deleteCompleted c
  ; postIsCreate = Config.postIsCreate c
  ; createPath = Config.createPath c
  ; processPost = Config.processPost c
  ; contentTypesProvided = Config.contentTypesProvided c
  ; languageAvailable = Config.languageAvailable c
  ; contentTypesAccepted = Config.contentTypesAccepted c
  ; charsetsProvided = Config.charsetsProvided c
  ; encodingsProvided = Config.encodingsProvided c
  ; variances = Config.variances c
  ; isConflict = Config.isConflict c
  ; multipleChoices = Config.multipleChoices c
  ; previouslyExisted = Config.previouslyExisted c
  ; movedPermanently = Config.movedPermanently c
  ; movedTemporarily = f
  ; lastModified = Config.lastModified c
  ; expires = Config.expires c
  ; generateETag = Config.generateETag c
  ; finishRequest = Config.finishRequest c
  }

update lastModified f c = record {
    resourceExists = Config.resourceExists c
  ; serviceAvailable = Config.serviceAvailable c
  ; isAuthorized = Config.isAuthorized c
  ; forbidden = Config.forbidden c
  ; allowMissingPost = Config.allowMissingPost c
  ; malformedRequest = Config.malformedRequest c
  ; uriTooLong = Config.uriTooLong c
  ; knownContentType = Config.knownContentType c
  ; validContentHeaders = Config.validContentHeaders c
  ; validEntityLength = Config.validEntityLength c
  ; options = Config.options c
  ; allowedMethods = Config.allowedMethods c
  ; knownMethods = Config.knownMethods c
  ; deleteResource = Config.deleteResource c
  ; deleteCompleted = Config.deleteCompleted c
  ; postIsCreate = Config.postIsCreate c
  ; createPath = Config.createPath c
  ; processPost = Config.processPost c
  ; contentTypesProvided = Config.contentTypesProvided c
  ; languageAvailable = Config.languageAvailable c
  ; contentTypesAccepted = Config.contentTypesAccepted c
  ; charsetsProvided = Config.charsetsProvided c
  ; encodingsProvided = Config.encodingsProvided c
  ; variances = Config.variances c
  ; isConflict = Config.isConflict c
  ; multipleChoices = Config.multipleChoices c
  ; previouslyExisted = Config.previouslyExisted c
  ; movedPermanently = Config.movedPermanently c
  ; movedTemporarily = Config.movedTemporarily c
  ; lastModified = f
  ; expires = Config.expires c
  ; generateETag = Config.generateETag c
  ; finishRequest = Config.finishRequest c
  }

update expires f c = record {
    resourceExists = Config.resourceExists c
  ; serviceAvailable = Config.serviceAvailable c
  ; isAuthorized = Config.isAuthorized c
  ; forbidden = Config.forbidden c
  ; allowMissingPost = Config.allowMissingPost c
  ; malformedRequest = Config.malformedRequest c
  ; uriTooLong = Config.uriTooLong c
  ; knownContentType = Config.knownContentType c
  ; validContentHeaders = Config.validContentHeaders c
  ; validEntityLength = Config.validEntityLength c
  ; options = Config.options c
  ; allowedMethods = Config.allowedMethods c
  ; knownMethods = Config.knownMethods c
  ; deleteResource = Config.deleteResource c
  ; deleteCompleted = Config.deleteCompleted c
  ; postIsCreate = Config.postIsCreate c
  ; createPath = Config.createPath c
  ; processPost = Config.processPost c
  ; contentTypesProvided = Config.contentTypesProvided c
  ; languageAvailable = Config.languageAvailable c
  ; contentTypesAccepted = Config.contentTypesAccepted c
  ; charsetsProvided = Config.charsetsProvided c
  ; encodingsProvided = Config.encodingsProvided c
  ; variances = Config.variances c
  ; isConflict = Config.isConflict c
  ; multipleChoices = Config.multipleChoices c
  ; previouslyExisted = Config.previouslyExisted c
  ; movedPermanently = Config.movedPermanently c
  ; movedTemporarily = Config.movedTemporarily c
  ; lastModified = Config.lastModified c
  ; expires = f
  ; generateETag = Config.generateETag c
  ; finishRequest = Config.finishRequest c
  }

update generateETag f c = record {
    resourceExists = Config.resourceExists c
  ; serviceAvailable = Config.serviceAvailable c
  ; isAuthorized = Config.isAuthorized c
  ; forbidden = Config.forbidden c
  ; allowMissingPost = Config.allowMissingPost c
  ; malformedRequest = Config.malformedRequest c
  ; uriTooLong = Config.uriTooLong c
  ; knownContentType = Config.knownContentType c
  ; validContentHeaders = Config.validContentHeaders c
  ; validEntityLength = Config.validEntityLength c
  ; options = Config.options c
  ; allowedMethods = Config.allowedMethods c
  ; knownMethods = Config.knownMethods c
  ; deleteResource = Config.deleteResource c
  ; deleteCompleted = Config.deleteCompleted c
  ; postIsCreate = Config.postIsCreate c
  ; createPath = Config.createPath c
  ; processPost = Config.processPost c
  ; contentTypesProvided = Config.contentTypesProvided c
  ; languageAvailable = Config.languageAvailable c
  ; contentTypesAccepted = Config.contentTypesAccepted c
  ; charsetsProvided = Config.charsetsProvided c
  ; encodingsProvided = Config.encodingsProvided c
  ; variances = Config.variances c
  ; isConflict = Config.isConflict c
  ; multipleChoices = Config.multipleChoices c
  ; previouslyExisted = Config.previouslyExisted c
  ; movedPermanently = Config.movedPermanently c
  ; movedTemporarily = Config.movedTemporarily c
  ; lastModified = Config.lastModified c
  ; expires = Config.expires c
  ; generateETag = f
  ; finishRequest = Config.finishRequest c
  }

update finishRequest f c = record {
    resourceExists = Config.resourceExists c
  ; serviceAvailable = Config.serviceAvailable c
  ; isAuthorized = Config.isAuthorized c
  ; forbidden = Config.forbidden c
  ; allowMissingPost = Config.allowMissingPost c
  ; malformedRequest = Config.malformedRequest c
  ; uriTooLong = Config.uriTooLong c
  ; knownContentType = Config.knownContentType c
  ; validContentHeaders = Config.validContentHeaders c
  ; validEntityLength = Config.validEntityLength c
  ; options = Config.options c
  ; allowedMethods = Config.allowedMethods c
  ; knownMethods = Config.knownMethods c
  ; deleteResource = Config.deleteResource c
  ; deleteCompleted = Config.deleteCompleted c
  ; postIsCreate = Config.postIsCreate c
  ; createPath = Config.createPath c
  ; processPost = Config.processPost c
  ; contentTypesProvided = Config.contentTypesProvided c
  ; languageAvailable = Config.languageAvailable c
  ; contentTypesAccepted = Config.contentTypesAccepted c
  ; charsetsProvided = Config.charsetsProvided c
  ; encodingsProvided = Config.encodingsProvided c
  ; variances = Config.variances c
  ; isConflict = Config.isConflict c
  ; multipleChoices = Config.multipleChoices c
  ; previouslyExisted = Config.previouslyExisted c
  ; movedPermanently = Config.movedPermanently c
  ; movedTemporarily = Config.movedTemporarily c
  ; lastModified = Config.lastModified c
  ; expires = Config.expires c
  ; generateETag = Config.generateETag c
  ; finishRequest = f
  }
