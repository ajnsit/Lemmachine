module Lemmachine.Resource.Configure where
open import Lemmachine.Request
open import Lemmachine.Resource
open import Lemmachine.Resource.Universe
open import Data.Bool
open import Data.Maybe
open import Data.Product
open import Data.List
open import Data.Function using (const)

private

 update : (code : Code) → convert code → Resource → Resource

 update resourceExists f c = record {
     resourceExists = f
   ; serviceAvailable = Resource.serviceAvailable c
   ; isAuthorized = Resource.isAuthorized c
   ; forbidden = Resource.forbidden c
   ; allowMissingPost = Resource.allowMissingPost c
   ; malformedRequest = Resource.malformedRequest c
   ; uriTooLong = Resource.uriTooLong c
   ; knownContentType = Resource.knownContentType c
   ; validContentHeaders = Resource.validContentHeaders c
   ; validEntityLength = Resource.validEntityLength c
   ; options = Resource.options c
   ; allowedMethods = Resource.allowedMethods c
   ; knownMethods = Resource.knownMethods c
   ; deleteResource = Resource.deleteResource c
   ; deleteCompleted = Resource.deleteCompleted c
   ; postIsCreate = Resource.postIsCreate c
   ; createPath = Resource.createPath c
   ; processPost = Resource.processPost c
   ; contentTypesProvided = Resource.contentTypesProvided c
   ; languageAvailable = Resource.languageAvailable c
   ; contentTypesAccepted = Resource.contentTypesAccepted c
   ; charsetsProvided = Resource.charsetsProvided c
   ; encodingsProvided = Resource.encodingsProvided c
   ; variances = Resource.variances c
   ; isConflict = Resource.isConflict c
   ; multipleChoices = Resource.multipleChoices c
   ; previouslyExisted = Resource.previouslyExisted c
   ; movedPermanently = Resource.movedPermanently c
   ; movedTemporarily = Resource.movedTemporarily c
   ; lastModified = Resource.lastModified c
   ; expires = Resource.expires c
   ; generateETag = Resource.generateETag c
   ; finishRequest = Resource.finishRequest c
   }

 update serviceAvailable f c = record {
     resourceExists = Resource.resourceExists c
   ; serviceAvailable = f
   ; isAuthorized = Resource.isAuthorized c
   ; forbidden = Resource.forbidden c
   ; allowMissingPost = Resource.allowMissingPost c
   ; malformedRequest = Resource.malformedRequest c
   ; uriTooLong = Resource.uriTooLong c
   ; knownContentType = Resource.knownContentType c
   ; validContentHeaders = Resource.validContentHeaders c
   ; validEntityLength = Resource.validEntityLength c
   ; options = Resource.options c
   ; allowedMethods = Resource.allowedMethods c
   ; knownMethods = Resource.knownMethods c
   ; deleteResource = Resource.deleteResource c
   ; deleteCompleted = Resource.deleteCompleted c
   ; postIsCreate = Resource.postIsCreate c
   ; createPath = Resource.createPath c
   ; processPost = Resource.processPost c
   ; contentTypesProvided = Resource.contentTypesProvided c
   ; languageAvailable = Resource.languageAvailable c
   ; contentTypesAccepted = Resource.contentTypesAccepted c
   ; charsetsProvided = Resource.charsetsProvided c
   ; encodingsProvided = Resource.encodingsProvided c
   ; variances = Resource.variances c
   ; isConflict = Resource.isConflict c
   ; multipleChoices = Resource.multipleChoices c
   ; previouslyExisted = Resource.previouslyExisted c
   ; movedPermanently = Resource.movedPermanently c
   ; movedTemporarily = Resource.movedTemporarily c
   ; lastModified = Resource.lastModified c
   ; expires = Resource.expires c
   ; generateETag = Resource.generateETag c
   ; finishRequest = Resource.finishRequest c
   }

 update isAuthorized f c = record {
     resourceExists = Resource.resourceExists c
   ; serviceAvailable = Resource.serviceAvailable c
   ; isAuthorized = f
   ; forbidden = Resource.forbidden c
   ; allowMissingPost = Resource.allowMissingPost c
   ; malformedRequest = Resource.malformedRequest c
   ; uriTooLong = Resource.uriTooLong c
   ; knownContentType = Resource.knownContentType c
   ; validContentHeaders = Resource.validContentHeaders c
   ; validEntityLength = Resource.validEntityLength c
   ; options = Resource.options c
   ; allowedMethods = Resource.allowedMethods c
   ; knownMethods = Resource.knownMethods c
   ; deleteResource = Resource.deleteResource c
   ; deleteCompleted = Resource.deleteCompleted c
   ; postIsCreate = Resource.postIsCreate c
   ; createPath = Resource.createPath c
   ; processPost = Resource.processPost c
   ; contentTypesProvided = Resource.contentTypesProvided c
   ; languageAvailable = Resource.languageAvailable c
   ; contentTypesAccepted = Resource.contentTypesAccepted c
   ; charsetsProvided = Resource.charsetsProvided c
   ; encodingsProvided = Resource.encodingsProvided c
   ; variances = Resource.variances c
   ; isConflict = Resource.isConflict c
   ; multipleChoices = Resource.multipleChoices c
   ; previouslyExisted = Resource.previouslyExisted c
   ; movedPermanently = Resource.movedPermanently c
   ; movedTemporarily = Resource.movedTemporarily c
   ; lastModified = Resource.lastModified c
   ; expires = Resource.expires c
   ; generateETag = Resource.generateETag c
   ; finishRequest = Resource.finishRequest c
   }

 update forbidden f c = record {
     resourceExists = Resource.resourceExists c
   ; serviceAvailable = Resource.serviceAvailable c
   ; isAuthorized = Resource.isAuthorized c
   ; forbidden = f
   ; allowMissingPost = Resource.allowMissingPost c
   ; malformedRequest = Resource.malformedRequest c
   ; uriTooLong = Resource.uriTooLong c
   ; knownContentType = Resource.knownContentType c
   ; validContentHeaders = Resource.validContentHeaders c
   ; validEntityLength = Resource.validEntityLength c
   ; options = Resource.options c
   ; allowedMethods = Resource.allowedMethods c
   ; knownMethods = Resource.knownMethods c
   ; deleteResource = Resource.deleteResource c
   ; deleteCompleted = Resource.deleteCompleted c
   ; postIsCreate = Resource.postIsCreate c
   ; createPath = Resource.createPath c
   ; processPost = Resource.processPost c
   ; contentTypesProvided = Resource.contentTypesProvided c
   ; languageAvailable = Resource.languageAvailable c
   ; contentTypesAccepted = Resource.contentTypesAccepted c
   ; charsetsProvided = Resource.charsetsProvided c
   ; encodingsProvided = Resource.encodingsProvided c
   ; variances = Resource.variances c
   ; isConflict = Resource.isConflict c
   ; multipleChoices = Resource.multipleChoices c
   ; previouslyExisted = Resource.previouslyExisted c
   ; movedPermanently = Resource.movedPermanently c
   ; movedTemporarily = Resource.movedTemporarily c
   ; lastModified = Resource.lastModified c
   ; expires = Resource.expires c
   ; generateETag = Resource.generateETag c
   ; finishRequest = Resource.finishRequest c
   }

 update allowMissingPost f c = record {
     resourceExists = Resource.resourceExists c
   ; serviceAvailable = Resource.serviceAvailable c
   ; isAuthorized = Resource.isAuthorized c
   ; forbidden = Resource.forbidden c
   ; allowMissingPost = f
   ; malformedRequest = Resource.malformedRequest c
   ; uriTooLong = Resource.uriTooLong c
   ; knownContentType = Resource.knownContentType c
   ; validContentHeaders = Resource.validContentHeaders c
   ; validEntityLength = Resource.validEntityLength c
   ; options = Resource.options c
   ; allowedMethods = Resource.allowedMethods c
   ; knownMethods = Resource.knownMethods c
   ; deleteResource = Resource.deleteResource c
   ; deleteCompleted = Resource.deleteCompleted c
   ; postIsCreate = Resource.postIsCreate c
   ; createPath = Resource.createPath c
   ; processPost = Resource.processPost c
   ; contentTypesProvided = Resource.contentTypesProvided c
   ; languageAvailable = Resource.languageAvailable c
   ; contentTypesAccepted = Resource.contentTypesAccepted c
   ; charsetsProvided = Resource.charsetsProvided c
   ; encodingsProvided = Resource.encodingsProvided c
   ; variances = Resource.variances c
   ; isConflict = Resource.isConflict c
   ; multipleChoices = Resource.multipleChoices c
   ; previouslyExisted = Resource.previouslyExisted c
   ; movedPermanently = Resource.movedPermanently c
   ; movedTemporarily = Resource.movedTemporarily c
   ; lastModified = Resource.lastModified c
   ; expires = Resource.expires c
   ; generateETag = Resource.generateETag c
   ; finishRequest = Resource.finishRequest c
   }

 update malformedRequest f c = record {
     resourceExists = Resource.resourceExists c
   ; serviceAvailable = Resource.serviceAvailable c
   ; isAuthorized = Resource.isAuthorized c
   ; forbidden = Resource.forbidden c
   ; allowMissingPost = Resource.allowMissingPost c
   ; malformedRequest = f
   ; uriTooLong = Resource.uriTooLong c
   ; knownContentType = Resource.knownContentType c
   ; validContentHeaders = Resource.validContentHeaders c
   ; validEntityLength = Resource.validEntityLength c
   ; options = Resource.options c
   ; allowedMethods = Resource.allowedMethods c
   ; knownMethods = Resource.knownMethods c
   ; deleteResource = Resource.deleteResource c
   ; deleteCompleted = Resource.deleteCompleted c
   ; postIsCreate = Resource.postIsCreate c
   ; createPath = Resource.createPath c
   ; processPost = Resource.processPost c
   ; contentTypesProvided = Resource.contentTypesProvided c
   ; languageAvailable = Resource.languageAvailable c
   ; contentTypesAccepted = Resource.contentTypesAccepted c
   ; charsetsProvided = Resource.charsetsProvided c
   ; encodingsProvided = Resource.encodingsProvided c
   ; variances = Resource.variances c
   ; isConflict = Resource.isConflict c
   ; multipleChoices = Resource.multipleChoices c
   ; previouslyExisted = Resource.previouslyExisted c
   ; movedPermanently = Resource.movedPermanently c
   ; movedTemporarily = Resource.movedTemporarily c
   ; lastModified = Resource.lastModified c
   ; expires = Resource.expires c
   ; generateETag = Resource.generateETag c
   ; finishRequest = Resource.finishRequest c
   }

 update uriTooLong f c = record {
     resourceExists = Resource.resourceExists c
   ; serviceAvailable = Resource.serviceAvailable c
   ; isAuthorized = Resource.isAuthorized c
   ; forbidden = Resource.forbidden c
   ; allowMissingPost = Resource.allowMissingPost c
   ; malformedRequest = Resource.malformedRequest c
   ; uriTooLong = f
   ; knownContentType = Resource.knownContentType c
   ; validContentHeaders = Resource.validContentHeaders c
   ; validEntityLength = Resource.validEntityLength c
   ; options = Resource.options c
   ; allowedMethods = Resource.allowedMethods c
   ; knownMethods = Resource.knownMethods c
   ; deleteResource = Resource.deleteResource c
   ; deleteCompleted = Resource.deleteCompleted c
   ; postIsCreate = Resource.postIsCreate c
   ; createPath = Resource.createPath c
   ; processPost = Resource.processPost c
   ; contentTypesProvided = Resource.contentTypesProvided c
   ; languageAvailable = Resource.languageAvailable c
   ; contentTypesAccepted = Resource.contentTypesAccepted c
   ; charsetsProvided = Resource.charsetsProvided c
   ; encodingsProvided = Resource.encodingsProvided c
   ; variances = Resource.variances c
   ; isConflict = Resource.isConflict c
   ; multipleChoices = Resource.multipleChoices c
   ; previouslyExisted = Resource.previouslyExisted c
   ; movedPermanently = Resource.movedPermanently c
   ; movedTemporarily = Resource.movedTemporarily c
   ; lastModified = Resource.lastModified c
   ; expires = Resource.expires c
   ; generateETag = Resource.generateETag c
   ; finishRequest = Resource.finishRequest c
   }

 update knownContentType f c = record {
     resourceExists = Resource.resourceExists c
   ; serviceAvailable = Resource.serviceAvailable c
   ; isAuthorized = Resource.isAuthorized c
   ; forbidden = Resource.forbidden c
   ; allowMissingPost = Resource.allowMissingPost c
   ; malformedRequest = Resource.malformedRequest c
   ; uriTooLong = Resource.uriTooLong c
   ; knownContentType = f
   ; validContentHeaders = Resource.validContentHeaders c
   ; validEntityLength = Resource.validEntityLength c
   ; options = Resource.options c
   ; allowedMethods = Resource.allowedMethods c
   ; knownMethods = Resource.knownMethods c
   ; deleteResource = Resource.deleteResource c
   ; deleteCompleted = Resource.deleteCompleted c
   ; postIsCreate = Resource.postIsCreate c
   ; createPath = Resource.createPath c
   ; processPost = Resource.processPost c
   ; contentTypesProvided = Resource.contentTypesProvided c
   ; languageAvailable = Resource.languageAvailable c
   ; contentTypesAccepted = Resource.contentTypesAccepted c
   ; charsetsProvided = Resource.charsetsProvided c
   ; encodingsProvided = Resource.encodingsProvided c
   ; variances = Resource.variances c
   ; isConflict = Resource.isConflict c
   ; multipleChoices = Resource.multipleChoices c
   ; previouslyExisted = Resource.previouslyExisted c
   ; movedPermanently = Resource.movedPermanently c
   ; movedTemporarily = Resource.movedTemporarily c
   ; lastModified = Resource.lastModified c
   ; expires = Resource.expires c
   ; generateETag = Resource.generateETag c
   ; finishRequest = Resource.finishRequest c
   }

 update validContentHeaders f c = record {
     resourceExists = Resource.resourceExists c
   ; serviceAvailable = Resource.serviceAvailable c
   ; isAuthorized = Resource.isAuthorized c
   ; forbidden = Resource.forbidden c
   ; allowMissingPost = Resource.allowMissingPost c
   ; malformedRequest = Resource.malformedRequest c
   ; uriTooLong = Resource.uriTooLong c
   ; knownContentType = Resource.knownContentType c
   ; validContentHeaders = f
   ; validEntityLength = Resource.validEntityLength c
   ; options = Resource.options c
   ; allowedMethods = Resource.allowedMethods c
   ; knownMethods = Resource.knownMethods c
   ; deleteResource = Resource.deleteResource c
   ; deleteCompleted = Resource.deleteCompleted c
   ; postIsCreate = Resource.postIsCreate c
   ; createPath = Resource.createPath c
   ; processPost = Resource.processPost c
   ; contentTypesProvided = Resource.contentTypesProvided c
   ; languageAvailable = Resource.languageAvailable c
   ; contentTypesAccepted = Resource.contentTypesAccepted c
   ; charsetsProvided = Resource.charsetsProvided c
   ; encodingsProvided = Resource.encodingsProvided c
   ; variances = Resource.variances c
   ; isConflict = Resource.isConflict c
   ; multipleChoices = Resource.multipleChoices c
   ; previouslyExisted = Resource.previouslyExisted c
   ; movedPermanently = Resource.movedPermanently c
   ; movedTemporarily = Resource.movedTemporarily c
   ; lastModified = Resource.lastModified c
   ; expires = Resource.expires c
   ; generateETag = Resource.generateETag c
   ; finishRequest = Resource.finishRequest c
   }

 update validEntityLength f c = record {
     resourceExists = Resource.resourceExists c
   ; serviceAvailable = Resource.serviceAvailable c
   ; isAuthorized = Resource.isAuthorized c
   ; forbidden = Resource.forbidden c
   ; allowMissingPost = Resource.allowMissingPost c
   ; malformedRequest = Resource.malformedRequest c
   ; uriTooLong = Resource.uriTooLong c
   ; knownContentType = Resource.knownContentType c
   ; validContentHeaders = Resource.validContentHeaders c
   ; validEntityLength = f
   ; options = Resource.options c
   ; allowedMethods = Resource.allowedMethods c
   ; knownMethods = Resource.knownMethods c
   ; deleteResource = Resource.deleteResource c
   ; deleteCompleted = Resource.deleteCompleted c
   ; postIsCreate = Resource.postIsCreate c
   ; createPath = Resource.createPath c
   ; processPost = Resource.processPost c
   ; contentTypesProvided = Resource.contentTypesProvided c
   ; languageAvailable = Resource.languageAvailable c
   ; contentTypesAccepted = Resource.contentTypesAccepted c
   ; charsetsProvided = Resource.charsetsProvided c
   ; encodingsProvided = Resource.encodingsProvided c
   ; variances = Resource.variances c
   ; isConflict = Resource.isConflict c
   ; multipleChoices = Resource.multipleChoices c
   ; previouslyExisted = Resource.previouslyExisted c
   ; movedPermanently = Resource.movedPermanently c
   ; movedTemporarily = Resource.movedTemporarily c
   ; lastModified = Resource.lastModified c
   ; expires = Resource.expires c
   ; generateETag = Resource.generateETag c
   ; finishRequest = Resource.finishRequest c
   }

 update options f c = record {
     resourceExists = Resource.resourceExists c
   ; serviceAvailable = Resource.serviceAvailable c
   ; isAuthorized = Resource.isAuthorized c
   ; forbidden = Resource.forbidden c
   ; allowMissingPost = Resource.allowMissingPost c
   ; malformedRequest = Resource.malformedRequest c
   ; uriTooLong = Resource.uriTooLong c
   ; knownContentType = Resource.knownContentType c
   ; validContentHeaders = Resource.validContentHeaders c
   ; validEntityLength = Resource.validEntityLength c
   ; options = f
   ; allowedMethods = Resource.allowedMethods c
   ; knownMethods = Resource.knownMethods c
   ; deleteResource = Resource.deleteResource c
   ; deleteCompleted = Resource.deleteCompleted c
   ; postIsCreate = Resource.postIsCreate c
   ; createPath = Resource.createPath c
   ; processPost = Resource.processPost c
   ; contentTypesProvided = Resource.contentTypesProvided c
   ; languageAvailable = Resource.languageAvailable c
   ; contentTypesAccepted = Resource.contentTypesAccepted c
   ; charsetsProvided = Resource.charsetsProvided c
   ; encodingsProvided = Resource.encodingsProvided c
   ; variances = Resource.variances c
   ; isConflict = Resource.isConflict c
   ; multipleChoices = Resource.multipleChoices c
   ; previouslyExisted = Resource.previouslyExisted c
   ; movedPermanently = Resource.movedPermanently c
   ; movedTemporarily = Resource.movedTemporarily c
   ; lastModified = Resource.lastModified c
   ; expires = Resource.expires c
   ; generateETag = Resource.generateETag c
   ; finishRequest = Resource.finishRequest c
   }

 update allowedMethods f c = record {
     resourceExists = Resource.resourceExists c
   ; serviceAvailable = Resource.serviceAvailable c
   ; isAuthorized = Resource.isAuthorized c
   ; forbidden = Resource.forbidden c
   ; allowMissingPost = Resource.allowMissingPost c
   ; malformedRequest = Resource.malformedRequest c
   ; uriTooLong = Resource.uriTooLong c
   ; knownContentType = Resource.knownContentType c
   ; validContentHeaders = Resource.validContentHeaders c
   ; validEntityLength = Resource.validEntityLength c
   ; options = Resource.options c
   ; allowedMethods = f
   ; knownMethods = Resource.knownMethods c
   ; deleteResource = Resource.deleteResource c
   ; deleteCompleted = Resource.deleteCompleted c
   ; postIsCreate = Resource.postIsCreate c
   ; createPath = Resource.createPath c
   ; processPost = Resource.processPost c
   ; contentTypesProvided = Resource.contentTypesProvided c
   ; languageAvailable = Resource.languageAvailable c
   ; contentTypesAccepted = Resource.contentTypesAccepted c
   ; charsetsProvided = Resource.charsetsProvided c
   ; encodingsProvided = Resource.encodingsProvided c
   ; variances = Resource.variances c
   ; isConflict = Resource.isConflict c
   ; multipleChoices = Resource.multipleChoices c
   ; previouslyExisted = Resource.previouslyExisted c
   ; movedPermanently = Resource.movedPermanently c
   ; movedTemporarily = Resource.movedTemporarily c
   ; lastModified = Resource.lastModified c
   ; expires = Resource.expires c
   ; generateETag = Resource.generateETag c
   ; finishRequest = Resource.finishRequest c
   }
 update knownMethods f c = record {
     resourceExists = Resource.resourceExists c
   ; serviceAvailable = Resource.serviceAvailable c
   ; isAuthorized = Resource.isAuthorized c
   ; forbidden = Resource.forbidden c
   ; allowMissingPost = Resource.allowMissingPost c
   ; malformedRequest = Resource.malformedRequest c
   ; uriTooLong = Resource.uriTooLong c
   ; knownContentType = Resource.knownContentType c
   ; validContentHeaders = Resource.validContentHeaders c
   ; validEntityLength = Resource.validEntityLength c
   ; options = Resource.options c
   ; allowedMethods = Resource.allowedMethods c
   ; knownMethods = f
   ; deleteResource = Resource.deleteResource c
   ; deleteCompleted = Resource.deleteCompleted c
   ; postIsCreate = Resource.postIsCreate c
   ; createPath = Resource.createPath c
   ; processPost = Resource.processPost c
   ; contentTypesProvided = Resource.contentTypesProvided c
   ; languageAvailable = Resource.languageAvailable c
   ; contentTypesAccepted = Resource.contentTypesAccepted c
   ; charsetsProvided = Resource.charsetsProvided c
   ; encodingsProvided = Resource.encodingsProvided c
   ; variances = Resource.variances c
   ; isConflict = Resource.isConflict c
   ; multipleChoices = Resource.multipleChoices c
   ; previouslyExisted = Resource.previouslyExisted c
   ; movedPermanently = Resource.movedPermanently c
   ; movedTemporarily = Resource.movedTemporarily c
   ; lastModified = Resource.lastModified c
   ; expires = Resource.expires c
   ; generateETag = Resource.generateETag c
   ; finishRequest = Resource.finishRequest c
   }

 update deleteResource f c = record {
     resourceExists = Resource.resourceExists c
   ; serviceAvailable = Resource.serviceAvailable c
   ; isAuthorized = Resource.isAuthorized c
   ; forbidden = Resource.forbidden c
   ; allowMissingPost = Resource.allowMissingPost c
   ; malformedRequest = Resource.malformedRequest c
   ; uriTooLong = Resource.uriTooLong c
   ; knownContentType = Resource.knownContentType c
   ; validContentHeaders = Resource.validContentHeaders c
   ; validEntityLength = Resource.validEntityLength c
   ; options = Resource.options c
   ; allowedMethods = Resource.allowedMethods c
   ; knownMethods = Resource.knownMethods c
   ; deleteResource = f
   ; deleteCompleted = Resource.deleteCompleted c
   ; postIsCreate = Resource.postIsCreate c
   ; createPath = Resource.createPath c
   ; processPost = Resource.processPost c
   ; contentTypesProvided = Resource.contentTypesProvided c
   ; languageAvailable = Resource.languageAvailable c
   ; contentTypesAccepted = Resource.contentTypesAccepted c
   ; charsetsProvided = Resource.charsetsProvided c
   ; encodingsProvided = Resource.encodingsProvided c
   ; variances = Resource.variances c
   ; isConflict = Resource.isConflict c
   ; multipleChoices = Resource.multipleChoices c
   ; previouslyExisted = Resource.previouslyExisted c
   ; movedPermanently = Resource.movedPermanently c
   ; movedTemporarily = Resource.movedTemporarily c
   ; lastModified = Resource.lastModified c
   ; expires = Resource.expires c
   ; generateETag = Resource.generateETag c
   ; finishRequest = Resource.finishRequest c
   }

 update deleteCompleted f c = record {
     resourceExists = Resource.resourceExists c
   ; serviceAvailable = Resource.serviceAvailable c
   ; isAuthorized = Resource.isAuthorized c
   ; forbidden = Resource.forbidden c
   ; allowMissingPost = Resource.allowMissingPost c
   ; malformedRequest = Resource.malformedRequest c
   ; uriTooLong = Resource.uriTooLong c
   ; knownContentType = Resource.knownContentType c
   ; validContentHeaders = Resource.validContentHeaders c
   ; validEntityLength = Resource.validEntityLength c
   ; options = Resource.options c
   ; allowedMethods = Resource.allowedMethods c
   ; knownMethods = Resource.knownMethods c
   ; deleteResource = Resource.deleteResource c
   ; deleteCompleted = f
   ; postIsCreate = Resource.postIsCreate c
   ; createPath = Resource.createPath c
   ; processPost = Resource.processPost c
   ; contentTypesProvided = Resource.contentTypesProvided c
   ; languageAvailable = Resource.languageAvailable c
   ; contentTypesAccepted = Resource.contentTypesAccepted c
   ; charsetsProvided = Resource.charsetsProvided c
   ; encodingsProvided = Resource.encodingsProvided c
   ; variances = Resource.variances c
   ; isConflict = Resource.isConflict c
   ; multipleChoices = Resource.multipleChoices c
   ; previouslyExisted = Resource.previouslyExisted c
   ; movedPermanently = Resource.movedPermanently c
   ; movedTemporarily = Resource.movedTemporarily c
   ; lastModified = Resource.lastModified c
   ; expires = Resource.expires c
   ; generateETag = Resource.generateETag c
   ; finishRequest = Resource.finishRequest c
   }

 update postIsCreate f c = record {
     resourceExists = Resource.resourceExists c
   ; serviceAvailable = Resource.serviceAvailable c
   ; isAuthorized = Resource.isAuthorized c
   ; forbidden = Resource.forbidden c
   ; allowMissingPost = Resource.allowMissingPost c
   ; malformedRequest = Resource.malformedRequest c
   ; uriTooLong = Resource.uriTooLong c
   ; knownContentType = Resource.knownContentType c
   ; validContentHeaders = Resource.validContentHeaders c
   ; validEntityLength = Resource.validEntityLength c
   ; options = Resource.options c
   ; allowedMethods = Resource.allowedMethods c
   ; knownMethods = Resource.knownMethods c
   ; deleteResource = Resource.deleteResource c
   ; deleteCompleted = Resource.deleteCompleted c
   ; postIsCreate = f
   ; createPath = Resource.createPath c
   ; processPost = Resource.processPost c
   ; contentTypesProvided = Resource.contentTypesProvided c
   ; languageAvailable = Resource.languageAvailable c
   ; contentTypesAccepted = Resource.contentTypesAccepted c
   ; charsetsProvided = Resource.charsetsProvided c
   ; encodingsProvided = Resource.encodingsProvided c
   ; variances = Resource.variances c
   ; isConflict = Resource.isConflict c
   ; multipleChoices = Resource.multipleChoices c
   ; previouslyExisted = Resource.previouslyExisted c
   ; movedPermanently = Resource.movedPermanently c
   ; movedTemporarily = Resource.movedTemporarily c
   ; lastModified = Resource.lastModified c
   ; expires = Resource.expires c
   ; generateETag = Resource.generateETag c
   ; finishRequest = Resource.finishRequest c
   }

 update createPath f c = record {
     resourceExists = Resource.resourceExists c
   ; serviceAvailable = Resource.serviceAvailable c
   ; isAuthorized = Resource.isAuthorized c
   ; forbidden = Resource.forbidden c
   ; allowMissingPost = Resource.allowMissingPost c
   ; malformedRequest = Resource.malformedRequest c
   ; uriTooLong = Resource.uriTooLong c
   ; knownContentType = Resource.knownContentType c
   ; validContentHeaders = Resource.validContentHeaders c
   ; validEntityLength = Resource.validEntityLength c
   ; options = Resource.options c
   ; allowedMethods = Resource.allowedMethods c
   ; knownMethods = Resource.knownMethods c
   ; deleteResource = Resource.deleteResource c
   ; deleteCompleted = Resource.deleteCompleted c
   ; postIsCreate = Resource.postIsCreate c
   ; createPath = f
   ; processPost = Resource.processPost c
   ; contentTypesProvided = Resource.contentTypesProvided c
   ; languageAvailable = Resource.languageAvailable c
   ; contentTypesAccepted = Resource.contentTypesAccepted c
   ; charsetsProvided = Resource.charsetsProvided c
   ; encodingsProvided = Resource.encodingsProvided c
   ; variances = Resource.variances c
   ; isConflict = Resource.isConflict c
   ; multipleChoices = Resource.multipleChoices c
   ; previouslyExisted = Resource.previouslyExisted c
   ; movedPermanently = Resource.movedPermanently c
   ; movedTemporarily = Resource.movedTemporarily c
   ; lastModified = Resource.lastModified c
   ; expires = Resource.expires c
   ; generateETag = Resource.generateETag c
   ; finishRequest = Resource.finishRequest c
   }

 update processPost f c = record {
     resourceExists = Resource.resourceExists c
   ; serviceAvailable = Resource.serviceAvailable c
   ; isAuthorized = Resource.isAuthorized c
   ; forbidden = Resource.forbidden c
   ; allowMissingPost = Resource.allowMissingPost c
   ; malformedRequest = Resource.malformedRequest c
   ; uriTooLong = Resource.uriTooLong c
   ; knownContentType = Resource.knownContentType c
   ; validContentHeaders = Resource.validContentHeaders c
   ; validEntityLength = Resource.validEntityLength c
   ; options = Resource.options c
   ; allowedMethods = Resource.allowedMethods c
   ; knownMethods = Resource.knownMethods c
   ; deleteResource = Resource.deleteResource c
   ; deleteCompleted = Resource.deleteCompleted c
   ; postIsCreate = Resource.postIsCreate c
   ; createPath = Resource.createPath c
   ; processPost = f
   ; contentTypesProvided = Resource.contentTypesProvided c
   ; languageAvailable = Resource.languageAvailable c
   ; contentTypesAccepted = Resource.contentTypesAccepted c
   ; charsetsProvided = Resource.charsetsProvided c
   ; encodingsProvided = Resource.encodingsProvided c
   ; variances = Resource.variances c
   ; isConflict = Resource.isConflict c
   ; multipleChoices = Resource.multipleChoices c
   ; previouslyExisted = Resource.previouslyExisted c
   ; movedPermanently = Resource.movedPermanently c
   ; movedTemporarily = Resource.movedTemporarily c
   ; lastModified = Resource.lastModified c
   ; expires = Resource.expires c
   ; generateETag = Resource.generateETag c
   ; finishRequest = Resource.finishRequest c
   }

 update contentTypesProvided f c = record {
     resourceExists = Resource.resourceExists c
   ; serviceAvailable = Resource.serviceAvailable c
   ; isAuthorized = Resource.isAuthorized c
   ; forbidden = Resource.forbidden c
   ; allowMissingPost = Resource.allowMissingPost c
   ; malformedRequest = Resource.malformedRequest c
   ; uriTooLong = Resource.uriTooLong c
   ; knownContentType = Resource.knownContentType c
   ; validContentHeaders = Resource.validContentHeaders c
   ; validEntityLength = Resource.validEntityLength c
   ; options = Resource.options c
   ; allowedMethods = Resource.allowedMethods c
   ; knownMethods = Resource.knownMethods c
   ; deleteResource = Resource.deleteResource c
   ; deleteCompleted = Resource.deleteCompleted c
   ; postIsCreate = Resource.postIsCreate c
   ; createPath = Resource.createPath c
   ; processPost = Resource.processPost c
   ; contentTypesProvided = f
   ; languageAvailable = Resource.languageAvailable c
   ; contentTypesAccepted = Resource.contentTypesAccepted c
   ; charsetsProvided = Resource.charsetsProvided c
   ; encodingsProvided = Resource.encodingsProvided c
   ; variances = Resource.variances c
   ; isConflict = Resource.isConflict c
   ; multipleChoices = Resource.multipleChoices c
   ; previouslyExisted = Resource.previouslyExisted c
   ; movedPermanently = Resource.movedPermanently c
   ; movedTemporarily = Resource.movedTemporarily c
   ; lastModified = Resource.lastModified c
   ; expires = Resource.expires c
   ; generateETag = Resource.generateETag c
   ; finishRequest = Resource.finishRequest c
   }

 update languageAvailable f c = record {
     resourceExists = Resource.resourceExists c
   ; serviceAvailable = Resource.serviceAvailable c
   ; isAuthorized = Resource.isAuthorized c
   ; forbidden = Resource.forbidden c
   ; allowMissingPost = Resource.allowMissingPost c
   ; malformedRequest = Resource.malformedRequest c
   ; uriTooLong = Resource.uriTooLong c
   ; knownContentType = Resource.knownContentType c
   ; validContentHeaders = Resource.validContentHeaders c
   ; validEntityLength = Resource.validEntityLength c
   ; options = Resource.options c
   ; allowedMethods = Resource.allowedMethods c
   ; knownMethods = Resource.knownMethods c
   ; deleteResource = Resource.deleteResource c
   ; deleteCompleted = Resource.deleteCompleted c
   ; postIsCreate = Resource.postIsCreate c
   ; createPath = Resource.createPath c
   ; processPost = Resource.processPost c
   ; contentTypesProvided = Resource.contentTypesProvided c
   ; languageAvailable = f
   ; contentTypesAccepted = Resource.contentTypesAccepted c
   ; charsetsProvided = Resource.charsetsProvided c
   ; encodingsProvided = Resource.encodingsProvided c
   ; variances = Resource.variances c
   ; isConflict = Resource.isConflict c
   ; multipleChoices = Resource.multipleChoices c
   ; previouslyExisted = Resource.previouslyExisted c
   ; movedPermanently = Resource.movedPermanently c
   ; movedTemporarily = Resource.movedTemporarily c
   ; lastModified = Resource.lastModified c
   ; expires = Resource.expires c
   ; generateETag = Resource.generateETag c
   ; finishRequest = Resource.finishRequest c
   }

 update contentTypesAccepted f c = record {
     resourceExists = Resource.resourceExists c
   ; serviceAvailable = Resource.serviceAvailable c
   ; isAuthorized = Resource.isAuthorized c
   ; forbidden = Resource.forbidden c
   ; allowMissingPost = Resource.allowMissingPost c
   ; malformedRequest = Resource.malformedRequest c
   ; uriTooLong = Resource.uriTooLong c
   ; knownContentType = Resource.knownContentType c
   ; validContentHeaders = Resource.validContentHeaders c
   ; validEntityLength = Resource.validEntityLength c
   ; options = Resource.options c
   ; allowedMethods = Resource.allowedMethods c
   ; knownMethods = Resource.knownMethods c
   ; deleteResource = Resource.deleteResource c
   ; deleteCompleted = Resource.deleteCompleted c
   ; postIsCreate = Resource.postIsCreate c
   ; createPath = Resource.createPath c
   ; processPost = Resource.processPost c
   ; contentTypesProvided = Resource.contentTypesProvided c
   ; languageAvailable = Resource.languageAvailable c
   ; contentTypesAccepted = f
   ; charsetsProvided = Resource.charsetsProvided c
   ; encodingsProvided = Resource.encodingsProvided c
   ; variances = Resource.variances c
   ; isConflict = Resource.isConflict c
   ; multipleChoices = Resource.multipleChoices c
   ; previouslyExisted = Resource.previouslyExisted c
   ; movedPermanently = Resource.movedPermanently c
   ; movedTemporarily = Resource.movedTemporarily c
   ; lastModified = Resource.lastModified c
   ; expires = Resource.expires c
   ; generateETag = Resource.generateETag c
   ; finishRequest = Resource.finishRequest c
   }

 update charsetsProvided f c = record {
     resourceExists = Resource.resourceExists c
   ; serviceAvailable = Resource.serviceAvailable c
   ; isAuthorized = Resource.isAuthorized c
   ; forbidden = Resource.forbidden c
   ; allowMissingPost = Resource.allowMissingPost c
   ; malformedRequest = Resource.malformedRequest c
   ; uriTooLong = Resource.uriTooLong c
   ; knownContentType = Resource.knownContentType c
   ; validContentHeaders = Resource.validContentHeaders c
   ; validEntityLength = Resource.validEntityLength c
   ; options = Resource.options c
   ; allowedMethods = Resource.allowedMethods c
   ; knownMethods = Resource.knownMethods c
   ; deleteResource = Resource.deleteResource c
   ; deleteCompleted = Resource.deleteCompleted c
   ; postIsCreate = Resource.postIsCreate c
   ; createPath = Resource.createPath c
   ; processPost = Resource.processPost c
   ; contentTypesProvided = Resource.contentTypesProvided c
   ; languageAvailable = Resource.languageAvailable c
   ; contentTypesAccepted = Resource.contentTypesAccepted c
   ; charsetsProvided = f
   ; encodingsProvided = Resource.encodingsProvided c
   ; variances = Resource.variances c
   ; isConflict = Resource.isConflict c
   ; multipleChoices = Resource.multipleChoices c
   ; previouslyExisted = Resource.previouslyExisted c
   ; movedPermanently = Resource.movedPermanently c
   ; movedTemporarily = Resource.movedTemporarily c
   ; lastModified = Resource.lastModified c
   ; expires = Resource.expires c
   ; generateETag = Resource.generateETag c
   ; finishRequest = Resource.finishRequest c
   }

 update encodingsProvided f c = record {
     resourceExists = Resource.resourceExists c
   ; serviceAvailable = Resource.serviceAvailable c
   ; isAuthorized = Resource.isAuthorized c
   ; forbidden = Resource.forbidden c
   ; allowMissingPost = Resource.allowMissingPost c
   ; malformedRequest = Resource.malformedRequest c
   ; uriTooLong = Resource.uriTooLong c
   ; knownContentType = Resource.knownContentType c
   ; validContentHeaders = Resource.validContentHeaders c
   ; validEntityLength = Resource.validEntityLength c
   ; options = Resource.options c
   ; allowedMethods = Resource.allowedMethods c
   ; knownMethods = Resource.knownMethods c
   ; deleteResource = Resource.deleteResource c
   ; deleteCompleted = Resource.deleteCompleted c
   ; postIsCreate = Resource.postIsCreate c
   ; createPath = Resource.createPath c
   ; processPost = Resource.processPost c
   ; contentTypesProvided = Resource.contentTypesProvided c
   ; languageAvailable = Resource.languageAvailable c
   ; contentTypesAccepted = Resource.contentTypesAccepted c
   ; charsetsProvided = Resource.charsetsProvided c
   ; encodingsProvided = f
   ; variances = Resource.variances c
   ; isConflict = Resource.isConflict c
   ; multipleChoices = Resource.multipleChoices c
   ; previouslyExisted = Resource.previouslyExisted c
   ; movedPermanently = Resource.movedPermanently c
   ; movedTemporarily = Resource.movedTemporarily c
   ; lastModified = Resource.lastModified c
   ; expires = Resource.expires c
   ; generateETag = Resource.generateETag c
   ; finishRequest = Resource.finishRequest c
   }

 update variances f c = record {
     resourceExists = Resource.resourceExists c
   ; serviceAvailable = Resource.serviceAvailable c
   ; isAuthorized = Resource.isAuthorized c
   ; forbidden = Resource.forbidden c
   ; allowMissingPost = Resource.allowMissingPost c
   ; malformedRequest = Resource.malformedRequest c
   ; uriTooLong = Resource.uriTooLong c
   ; knownContentType = Resource.knownContentType c
   ; validContentHeaders = Resource.validContentHeaders c
   ; validEntityLength = Resource.validEntityLength c
   ; options = Resource.options c
   ; allowedMethods = Resource.allowedMethods c
   ; knownMethods = Resource.knownMethods c
   ; deleteResource = Resource.deleteResource c
   ; deleteCompleted = Resource.deleteCompleted c
   ; postIsCreate = Resource.postIsCreate c
   ; createPath = Resource.createPath c
   ; processPost = Resource.processPost c
   ; contentTypesProvided = Resource.contentTypesProvided c
   ; languageAvailable = Resource.languageAvailable c
   ; contentTypesAccepted = Resource.contentTypesAccepted c
   ; charsetsProvided = Resource.charsetsProvided c
   ; encodingsProvided = Resource.encodingsProvided c
   ; variances = f
   ; isConflict = Resource.isConflict c
   ; multipleChoices = Resource.multipleChoices c
   ; previouslyExisted = Resource.previouslyExisted c
   ; movedPermanently = Resource.movedPermanently c
   ; movedTemporarily = Resource.movedTemporarily c
   ; lastModified = Resource.lastModified c
   ; expires = Resource.expires c
   ; generateETag = Resource.generateETag c
   ; finishRequest = Resource.finishRequest c
   }

 update isConflict f c = record {
     resourceExists = Resource.resourceExists c
   ; serviceAvailable = Resource.serviceAvailable c
   ; isAuthorized = Resource.isAuthorized c
   ; forbidden = Resource.forbidden c
   ; allowMissingPost = Resource.allowMissingPost c
   ; malformedRequest = Resource.malformedRequest c
   ; uriTooLong = Resource.uriTooLong c
   ; knownContentType = Resource.knownContentType c
   ; validContentHeaders = Resource.validContentHeaders c
   ; validEntityLength = Resource.validEntityLength c
   ; options = Resource.options c
   ; allowedMethods = Resource.allowedMethods c
   ; knownMethods = Resource.knownMethods c
   ; deleteResource = Resource.deleteResource c
   ; deleteCompleted = Resource.deleteCompleted c
   ; postIsCreate = Resource.postIsCreate c
   ; createPath = Resource.createPath c
   ; processPost = Resource.processPost c
   ; contentTypesProvided = Resource.contentTypesProvided c
   ; languageAvailable = Resource.languageAvailable c
   ; contentTypesAccepted = Resource.contentTypesAccepted c
   ; charsetsProvided = Resource.charsetsProvided c
   ; encodingsProvided = Resource.encodingsProvided c
   ; variances = Resource.variances c
   ; isConflict = f
   ; multipleChoices = Resource.multipleChoices c
   ; previouslyExisted = Resource.previouslyExisted c
   ; movedPermanently = Resource.movedPermanently c
   ; movedTemporarily = Resource.movedTemporarily c
   ; lastModified = Resource.lastModified c
   ; expires = Resource.expires c
   ; generateETag = Resource.generateETag c
   ; finishRequest = Resource.finishRequest c
   }

 update multipleChoices f c = record {
     resourceExists = Resource.resourceExists c
   ; serviceAvailable = Resource.serviceAvailable c
   ; isAuthorized = Resource.isAuthorized c
   ; forbidden = Resource.forbidden c
   ; allowMissingPost = Resource.allowMissingPost c
   ; malformedRequest = Resource.malformedRequest c
   ; uriTooLong = Resource.uriTooLong c
   ; knownContentType = Resource.knownContentType c
   ; validContentHeaders = Resource.validContentHeaders c
   ; validEntityLength = Resource.validEntityLength c
   ; options = Resource.options c
   ; allowedMethods = Resource.allowedMethods c
   ; knownMethods = Resource.knownMethods c
   ; deleteResource = Resource.deleteResource c
   ; deleteCompleted = Resource.deleteCompleted c
   ; postIsCreate = Resource.postIsCreate c
   ; createPath = Resource.createPath c
   ; processPost = Resource.processPost c
   ; contentTypesProvided = Resource.contentTypesProvided c
   ; languageAvailable = Resource.languageAvailable c
   ; contentTypesAccepted = Resource.contentTypesAccepted c
   ; charsetsProvided = Resource.charsetsProvided c
   ; encodingsProvided = Resource.encodingsProvided c
   ; variances = Resource.variances c
   ; isConflict = Resource.isConflict c
   ; multipleChoices = f
   ; previouslyExisted = Resource.previouslyExisted c
   ; movedPermanently = Resource.movedPermanently c
   ; movedTemporarily = Resource.movedTemporarily c
   ; lastModified = Resource.lastModified c
   ; expires = Resource.expires c
   ; generateETag = Resource.generateETag c
   ; finishRequest = Resource.finishRequest c
   }

 update previouslyExisted f c = record {
     resourceExists = Resource.resourceExists c
   ; serviceAvailable = Resource.serviceAvailable c
   ; isAuthorized = Resource.isAuthorized c
   ; forbidden = Resource.forbidden c
   ; allowMissingPost = Resource.allowMissingPost c
   ; malformedRequest = Resource.malformedRequest c
   ; uriTooLong = Resource.uriTooLong c
   ; knownContentType = Resource.knownContentType c
   ; validContentHeaders = Resource.validContentHeaders c
   ; validEntityLength = Resource.validEntityLength c
   ; options = Resource.options c
   ; allowedMethods = Resource.allowedMethods c
   ; knownMethods = Resource.knownMethods c
   ; deleteResource = Resource.deleteResource c
   ; deleteCompleted = Resource.deleteCompleted c
   ; postIsCreate = Resource.postIsCreate c
   ; createPath = Resource.createPath c
   ; processPost = Resource.processPost c
   ; contentTypesProvided = Resource.contentTypesProvided c
   ; languageAvailable = Resource.languageAvailable c
   ; contentTypesAccepted = Resource.contentTypesAccepted c
   ; charsetsProvided = Resource.charsetsProvided c
   ; encodingsProvided = Resource.encodingsProvided c
   ; variances = Resource.variances c
   ; isConflict = Resource.isConflict c
   ; multipleChoices = Resource.multipleChoices c
   ; previouslyExisted = f
   ; movedPermanently = Resource.movedPermanently c
   ; movedTemporarily = Resource.movedTemporarily c
   ; lastModified = Resource.lastModified c
   ; expires = Resource.expires c
   ; generateETag = Resource.generateETag c
   ; finishRequest = Resource.finishRequest c
   }

 update movedPermanently f c = record {
     resourceExists = Resource.resourceExists c
   ; serviceAvailable = Resource.serviceAvailable c
   ; isAuthorized = Resource.isAuthorized c
   ; forbidden = Resource.forbidden c
   ; allowMissingPost = Resource.allowMissingPost c
   ; malformedRequest = Resource.malformedRequest c
   ; uriTooLong = Resource.uriTooLong c
   ; knownContentType = Resource.knownContentType c
   ; validContentHeaders = Resource.validContentHeaders c
   ; validEntityLength = Resource.validEntityLength c
   ; options = Resource.options c
   ; allowedMethods = Resource.allowedMethods c
   ; knownMethods = Resource.knownMethods c
   ; deleteResource = Resource.deleteResource c
   ; deleteCompleted = Resource.deleteCompleted c
   ; postIsCreate = Resource.postIsCreate c
   ; createPath = Resource.createPath c
   ; processPost = Resource.processPost c
   ; contentTypesProvided = Resource.contentTypesProvided c
   ; languageAvailable = Resource.languageAvailable c
   ; contentTypesAccepted = Resource.contentTypesAccepted c
   ; charsetsProvided = Resource.charsetsProvided c
   ; encodingsProvided = Resource.encodingsProvided c
   ; variances = Resource.variances c
   ; isConflict = Resource.isConflict c
   ; multipleChoices = Resource.multipleChoices c
   ; previouslyExisted = Resource.previouslyExisted c
   ; movedPermanently = f
   ; movedTemporarily = Resource.movedTemporarily c
   ; lastModified = Resource.lastModified c
   ; expires = Resource.expires c
   ; generateETag = Resource.generateETag c
   ; finishRequest = Resource.finishRequest c
   }

 update movedTemporarily f c = record {
     resourceExists = Resource.resourceExists c
   ; serviceAvailable = Resource.serviceAvailable c
   ; isAuthorized = Resource.isAuthorized c
   ; forbidden = Resource.forbidden c
   ; allowMissingPost = Resource.allowMissingPost c
   ; malformedRequest = Resource.malformedRequest c
   ; uriTooLong = Resource.uriTooLong c
   ; knownContentType = Resource.knownContentType c
   ; validContentHeaders = Resource.validContentHeaders c
   ; validEntityLength = Resource.validEntityLength c
   ; options = Resource.options c
   ; allowedMethods = Resource.allowedMethods c
   ; knownMethods = Resource.knownMethods c
   ; deleteResource = Resource.deleteResource c
   ; deleteCompleted = Resource.deleteCompleted c
   ; postIsCreate = Resource.postIsCreate c
   ; createPath = Resource.createPath c
   ; processPost = Resource.processPost c
   ; contentTypesProvided = Resource.contentTypesProvided c
   ; languageAvailable = Resource.languageAvailable c
   ; contentTypesAccepted = Resource.contentTypesAccepted c
   ; charsetsProvided = Resource.charsetsProvided c
   ; encodingsProvided = Resource.encodingsProvided c
   ; variances = Resource.variances c
   ; isConflict = Resource.isConflict c
   ; multipleChoices = Resource.multipleChoices c
   ; previouslyExisted = Resource.previouslyExisted c
   ; movedPermanently = Resource.movedPermanently c
   ; movedTemporarily = f
   ; lastModified = Resource.lastModified c
   ; expires = Resource.expires c
   ; generateETag = Resource.generateETag c
   ; finishRequest = Resource.finishRequest c
   }

 update lastModified f c = record {
     resourceExists = Resource.resourceExists c
   ; serviceAvailable = Resource.serviceAvailable c
   ; isAuthorized = Resource.isAuthorized c
   ; forbidden = Resource.forbidden c
   ; allowMissingPost = Resource.allowMissingPost c
   ; malformedRequest = Resource.malformedRequest c
   ; uriTooLong = Resource.uriTooLong c
   ; knownContentType = Resource.knownContentType c
   ; validContentHeaders = Resource.validContentHeaders c
   ; validEntityLength = Resource.validEntityLength c
   ; options = Resource.options c
   ; allowedMethods = Resource.allowedMethods c
   ; knownMethods = Resource.knownMethods c
   ; deleteResource = Resource.deleteResource c
   ; deleteCompleted = Resource.deleteCompleted c
   ; postIsCreate = Resource.postIsCreate c
   ; createPath = Resource.createPath c
   ; processPost = Resource.processPost c
   ; contentTypesProvided = Resource.contentTypesProvided c
   ; languageAvailable = Resource.languageAvailable c
   ; contentTypesAccepted = Resource.contentTypesAccepted c
   ; charsetsProvided = Resource.charsetsProvided c
   ; encodingsProvided = Resource.encodingsProvided c
   ; variances = Resource.variances c
   ; isConflict = Resource.isConflict c
   ; multipleChoices = Resource.multipleChoices c
   ; previouslyExisted = Resource.previouslyExisted c
   ; movedPermanently = Resource.movedPermanently c
   ; movedTemporarily = Resource.movedTemporarily c
   ; lastModified = f
   ; expires = Resource.expires c
   ; generateETag = Resource.generateETag c
   ; finishRequest = Resource.finishRequest c
   }

 update expires f c = record {
     resourceExists = Resource.resourceExists c
   ; serviceAvailable = Resource.serviceAvailable c
   ; isAuthorized = Resource.isAuthorized c
   ; forbidden = Resource.forbidden c
   ; allowMissingPost = Resource.allowMissingPost c
   ; malformedRequest = Resource.malformedRequest c
   ; uriTooLong = Resource.uriTooLong c
   ; knownContentType = Resource.knownContentType c
   ; validContentHeaders = Resource.validContentHeaders c
   ; validEntityLength = Resource.validEntityLength c
   ; options = Resource.options c
   ; allowedMethods = Resource.allowedMethods c
   ; knownMethods = Resource.knownMethods c
   ; deleteResource = Resource.deleteResource c
   ; deleteCompleted = Resource.deleteCompleted c
   ; postIsCreate = Resource.postIsCreate c
   ; createPath = Resource.createPath c
   ; processPost = Resource.processPost c
   ; contentTypesProvided = Resource.contentTypesProvided c
   ; languageAvailable = Resource.languageAvailable c
   ; contentTypesAccepted = Resource.contentTypesAccepted c
   ; charsetsProvided = Resource.charsetsProvided c
   ; encodingsProvided = Resource.encodingsProvided c
   ; variances = Resource.variances c
   ; isConflict = Resource.isConflict c
   ; multipleChoices = Resource.multipleChoices c
   ; previouslyExisted = Resource.previouslyExisted c
   ; movedPermanently = Resource.movedPermanently c
   ; movedTemporarily = Resource.movedTemporarily c
   ; lastModified = Resource.lastModified c
   ; expires = f
   ; generateETag = Resource.generateETag c
   ; finishRequest = Resource.finishRequest c
   }

 update generateETag f c = record {
     resourceExists = Resource.resourceExists c
   ; serviceAvailable = Resource.serviceAvailable c
   ; isAuthorized = Resource.isAuthorized c
   ; forbidden = Resource.forbidden c
   ; allowMissingPost = Resource.allowMissingPost c
   ; malformedRequest = Resource.malformedRequest c
   ; uriTooLong = Resource.uriTooLong c
   ; knownContentType = Resource.knownContentType c
   ; validContentHeaders = Resource.validContentHeaders c
   ; validEntityLength = Resource.validEntityLength c
   ; options = Resource.options c
   ; allowedMethods = Resource.allowedMethods c
   ; knownMethods = Resource.knownMethods c
   ; deleteResource = Resource.deleteResource c
   ; deleteCompleted = Resource.deleteCompleted c
   ; postIsCreate = Resource.postIsCreate c
   ; createPath = Resource.createPath c
   ; processPost = Resource.processPost c
   ; contentTypesProvided = Resource.contentTypesProvided c
   ; languageAvailable = Resource.languageAvailable c
   ; contentTypesAccepted = Resource.contentTypesAccepted c
   ; charsetsProvided = Resource.charsetsProvided c
   ; encodingsProvided = Resource.encodingsProvided c
   ; variances = Resource.variances c
   ; isConflict = Resource.isConflict c
   ; multipleChoices = Resource.multipleChoices c
   ; previouslyExisted = Resource.previouslyExisted c
   ; movedPermanently = Resource.movedPermanently c
   ; movedTemporarily = Resource.movedTemporarily c
   ; lastModified = Resource.lastModified c
   ; expires = Resource.expires c
   ; generateETag = f
   ; finishRequest = Resource.finishRequest c
   }

 update finishRequest f c = record {
     resourceExists = Resource.resourceExists c
   ; serviceAvailable = Resource.serviceAvailable c
   ; isAuthorized = Resource.isAuthorized c
   ; forbidden = Resource.forbidden c
   ; allowMissingPost = Resource.allowMissingPost c
   ; malformedRequest = Resource.malformedRequest c
   ; uriTooLong = Resource.uriTooLong c
   ; knownContentType = Resource.knownContentType c
   ; validContentHeaders = Resource.validContentHeaders c
   ; validEntityLength = Resource.validEntityLength c
   ; options = Resource.options c
   ; allowedMethods = Resource.allowedMethods c
   ; knownMethods = Resource.knownMethods c
   ; deleteResource = Resource.deleteResource c
   ; deleteCompleted = Resource.deleteCompleted c
   ; postIsCreate = Resource.postIsCreate c
   ; createPath = Resource.createPath c
   ; processPost = Resource.processPost c
   ; contentTypesProvided = Resource.contentTypesProvided c
   ; languageAvailable = Resource.languageAvailable c
   ; contentTypesAccepted = Resource.contentTypesAccepted c
   ; charsetsProvided = Resource.charsetsProvided c
   ; encodingsProvided = Resource.encodingsProvided c
   ; variances = Resource.variances c
   ; isConflict = Resource.isConflict c
   ; multipleChoices = Resource.multipleChoices c
   ; previouslyExisted = Resource.previouslyExisted c
   ; movedPermanently = Resource.movedPermanently c
   ; movedTemporarily = Resource.movedTemporarily c
   ; lastModified = Resource.lastModified c
   ; expires = Resource.expires c
   ; generateETag = Resource.generateETag c
   ; finishRequest = f
   }

 default : Resource
 default = record {
     resourceExists = const true
   ; serviceAvailable = const true
   ; isAuthorized = const true
   ; forbidden = const false
   ; allowMissingPost = const false
   ; malformedRequest = const false
   ; uriTooLong = const false
   ; knownContentType = const true
   ; validContentHeaders = const true
   ; validEntityLength = const true
   ; options = const []
   ; allowedMethods = const (HEAD ∷ GET ∷ [])
   ; knownMethods = const (HEAD ∷ GET ∷ PUT ∷ DELETE ∷ POST ∷ TRACE ∷ CONNECT ∷ OPTIONS ∷ [])
   ; deleteResource = const false
   ; deleteCompleted = const true
   ; postIsCreate = const false
   ; createPath = const nothing
   ; processPost = const false
   ; contentTypesProvided = const [ "text/html" , "toHtml" ]
   ; languageAvailable = const true
   ; contentTypesAccepted = const []
   ; charsetsProvided = const []
   ; encodingsProvided = const [ "identity" , "defaultEncoder" ]
   ; variances = const []
   ; isConflict = const false
   ; multipleChoices = const false
   ; previouslyExisted = const false
   ; movedPermanently = const nothing
   ; movedTemporarily = const nothing
   ; lastModified = const nothing
   ; expires = const nothing
   ; generateETag = const nothing
   ; finishRequest = const true
   }

configure : Resource → Hooks → Resource
configure base [] = base
configure base ((code , f) ∷ cfs) = update code f (configure base cfs)

toResource : Hooks → Resource
toResource props = configure default props
